using DUnion.Models;
using Microsoft.CodeAnalysis.Text;
using System.IO;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using CA = Microsoft.CodeAnalysis;

namespace DUnion.Generators;

internal sealed class AttributeGenerator : IStaticUnionGenerator
{
    private static readonly Assembly _assembly = typeof(AttributeGenerator).Assembly;

    private static readonly Regex _public = new("public", RegexOptions.Compiled);

    public void Execute(CA.IncrementalGeneratorPostInitializationContext context)
    {
        foreach (var name in _assembly.GetManifestResourceNames())
        {
            if (name.EndsWith(".cs"))
            {
                using var sr = new StreamReader(_assembly.GetManifestResourceStream(name));
                var source = sr.ReadToEnd();
                source = _public.Replace(source, "internal", 1);
                source = Constants.AutoGeneratedHeader + "\n" + source;
                context.AddSource(name, SourceText.From(source, Encoding.UTF8));
            }
        }
    }
}