/* Diagnostics: 0 */

/* Sources: 1 */
/* File Path: DUnion\DUnion.SourceGenerator\TestCases.JsonValue.g.cs */
// =============================================================
// This code was generated by the DUnion source generator.
// Changes to this file will be lost if the code is regenerated.
// =============================================================
#nullable enable
#pragma warning disable
namespace TestCases
{
    public readonly partial record struct JsonValue : System.IEquatable<TestCases.JsonValue>
    {
        /// <summary>
        /// A discriminator value which indicates what the type of <see cref="_value"/> is.
        /// <list type="table">
        ///     <listheader>
        ///         <term>Discriminator value.</term>
        ///         <description>The type that <see cref="_value"/> will contain.</description>
        ///     </listheader>
        ///     <item>
        ///         <term><c>1</c></term>
        ///         <description><see cref="TestCases.JsonValue.String" /></description>
        ///     </item>
        ///     <item>
        ///         <term><c>2</c></term>
        ///         <description><see cref="TestCases.JsonValue.Number" /></description>
        ///     </item>
        ///     <item>
        ///         <term><c>3</c></term>
        ///         <description><see cref="TestCases.JsonValue.Boolean" /></description>
        ///     </item>
        ///     <item>
        ///         <term><c>4</c></term>
        ///         <description><see cref="TestCases.JsonValue.Null" /></description>
        ///     </item>
        ///     <item>
        ///         <term><c>5</c></term>
        ///         <description><see cref="TestCases.JsonValue.Array" /></description>
        ///     </item>
        ///     <item>
        ///         <term><c>6</c></term>
        ///         <description><see cref="TestCases.JsonValue.Object" /></description>
        ///     </item>
        /// </list>
        /// </summary>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        private readonly System.Byte _discriminator;
    
        /// <summary>
        /// The underlying value that this union instance represents. Will be one of <see cref="TestCases.JsonValue.String" />, <see cref="TestCases.JsonValue.Number" />, <see cref="TestCases.JsonValue.Boolean" />, <see cref="TestCases.JsonValue.Null" />, <see cref="TestCases.JsonValue.Array" />, <see cref="TestCases.JsonValue.Object" />.
        /// </summary>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        private readonly System.Object? _value;
    
        /// <summary>
        /// Returns the string representation of the current value.
        /// </summary>
        /// <returns>the string representation of the current value.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public override System.String ToString()
        {
            return this._value?.ToString() ?? "";
        }
    
        /// <inheritdoc />
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public override System.Int32 GetHashCode()
        {
            return new System.ValueTuple<System.Byte, System.Object?>(this._discriminator, this._value).GetHashCode();
        }
    
        /// <summary>
        /// Determines whether the two <see cref="TestCases.JsonValue" /> instances are equal.
        /// </summary>
        /// <param name="left">The <see cref="TestCases.JsonValue" /> to compare to <paramref name="right"/>.</param>
        /// <param name="right">The <see cref="TestCases.JsonValue" /> to compare to <paramref name="left"/>.</param>
        /// <returns><c>true</c> if <paramref name="left"/> and <paramref name="right"/> are equal; otherwise <c>false</c>.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static System.Boolean Equals(TestCases.JsonValue left, TestCases.JsonValue right)
        {
            
            return left.Equals(right);
        }
    
        
    
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.JsonValue" /> class, using a <see cref="TestCases.JsonValue.String" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.JsonValue" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public JsonValue(TestCases.JsonValue.String value)
        {
            this._discriminator = 1;
            this._value = value;
        }
        
        /// <summary>
        /// Determines if the current <see cref="TestCases.JsonValue" /> instance represents a <see cref="TestCases.JsonValue.String" /> or not.
        /// </summary>
        /// <param name="value">The <see cref="TestCases.JsonValue.String" /> value this wraps if this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.String" />, otherwise the default value of <see cref="TestCases.JsonValue.String" />.</param>
        /// <returns><c>true</c> if this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.String" />; otherwise <c>false</c>.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public System.Boolean IsString(out TestCases.JsonValue.String value)
        {
            if (this._discriminator == 1)
            {
                value = ((TestCases.JsonValue.String)this._value);
                return true;
            }
            else
            {
                value = default(TestCases.JsonValue.String);
                return false;
            }
        }
        
        /// <summary>
        /// Determines if the current <see cref="TestCases.JsonValue" /> instance represents a <see cref="TestCases.JsonValue.String" /> or not.
        /// </summary>
        /// <returns><c>true</c> if this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.String" />; otherwise <c>false</c>.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public System.Boolean IsString()
        {
            return this._discriminator == 1;
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.String" />; otherwise the default value of <see cref="TestCases.JsonValue.String" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.String" />; otherwise the default value of <see cref="TestCases.JsonValue.String" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.JsonValue.String AsStringOrDefault()
        {
            if (this._discriminator == 1)
            {
                return ((TestCases.JsonValue.String)this._value);
            }
            else
            {
                return default(TestCases.JsonValue.String);
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.String" />; otherwise <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.String" />; otherwise <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.JsonValue.String AsStringOrDefault(TestCases.JsonValue.String @default)
        {
            if (this._discriminator == 1)
            {
                return ((TestCases.JsonValue.String)this._value);
            }
            else
            {
                return @default;
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.String" />; otherwise the result of invoking <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.String" />; otherwise the result of invoking <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.JsonValue.String AsStringOrDefault(System.Func<TestCases.JsonValue.String> @default)
        {
            if (this._discriminator == 1)
            {
                return ((TestCases.JsonValue.String)this._value);
            }
            else
            {
                return @default();
            }
        }
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.JsonValue" /> class, using a <see cref="TestCases.JsonValue.String" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.JsonValue" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static implicit operator TestCases.JsonValue(TestCases.JsonValue.String value)
        {
            return new TestCases.JsonValue(value);
        }
        
        /// <summary>
        /// Returns the value that <paramref name="value" /> represents if it is a <see cref="TestCases.JsonValue.String" />
        /// </summary>
        /// <returns>the value that <paramref name="value" /> represents if it is a <see cref="TestCases.JsonValue.String" />.</returns>
        /// <exception cref="System.InvalidCastException">Thrown when the value represented by <paramref name="value" /> is not a <see cref="TestCases.JsonValue.String" />.</exception>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static explicit operator TestCases.JsonValue.String(TestCases.JsonValue value)
        {
            if (value._discriminator == 1)
            {
                return ((TestCases.JsonValue.String)value._value);
            }
            else
            {
                throw new System.InvalidCastException();
            }
        }
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.JsonValue" /> class, using a <see cref="TestCases.JsonValue.Number" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.JsonValue" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public JsonValue(TestCases.JsonValue.Number value)
        {
            this._discriminator = 2;
            this._value = value;
        }
        
        /// <summary>
        /// Determines if the current <see cref="TestCases.JsonValue" /> instance represents a <see cref="TestCases.JsonValue.Number" /> or not.
        /// </summary>
        /// <param name="value">The <see cref="TestCases.JsonValue.Number" /> value this wraps if this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Number" />, otherwise the default value of <see cref="TestCases.JsonValue.Number" />.</param>
        /// <returns><c>true</c> if this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Number" />; otherwise <c>false</c>.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public System.Boolean IsNumber(out TestCases.JsonValue.Number value)
        {
            if (this._discriminator == 2)
            {
                value = ((TestCases.JsonValue.Number)this._value);
                return true;
            }
            else
            {
                value = default(TestCases.JsonValue.Number);
                return false;
            }
        }
        
        /// <summary>
        /// Determines if the current <see cref="TestCases.JsonValue" /> instance represents a <see cref="TestCases.JsonValue.Number" /> or not.
        /// </summary>
        /// <returns><c>true</c> if this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Number" />; otherwise <c>false</c>.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public System.Boolean IsNumber()
        {
            return this._discriminator == 2;
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Number" />; otherwise the default value of <see cref="TestCases.JsonValue.Number" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Number" />; otherwise the default value of <see cref="TestCases.JsonValue.Number" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.JsonValue.Number AsNumberOrDefault()
        {
            if (this._discriminator == 2)
            {
                return ((TestCases.JsonValue.Number)this._value);
            }
            else
            {
                return default(TestCases.JsonValue.Number);
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Number" />; otherwise <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Number" />; otherwise <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.JsonValue.Number AsNumberOrDefault(TestCases.JsonValue.Number @default)
        {
            if (this._discriminator == 2)
            {
                return ((TestCases.JsonValue.Number)this._value);
            }
            else
            {
                return @default;
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Number" />; otherwise the result of invoking <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Number" />; otherwise the result of invoking <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.JsonValue.Number AsNumberOrDefault(System.Func<TestCases.JsonValue.Number> @default)
        {
            if (this._discriminator == 2)
            {
                return ((TestCases.JsonValue.Number)this._value);
            }
            else
            {
                return @default();
            }
        }
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.JsonValue" /> class, using a <see cref="TestCases.JsonValue.Number" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.JsonValue" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static implicit operator TestCases.JsonValue(TestCases.JsonValue.Number value)
        {
            return new TestCases.JsonValue(value);
        }
        
        /// <summary>
        /// Returns the value that <paramref name="value" /> represents if it is a <see cref="TestCases.JsonValue.Number" />
        /// </summary>
        /// <returns>the value that <paramref name="value" /> represents if it is a <see cref="TestCases.JsonValue.Number" />.</returns>
        /// <exception cref="System.InvalidCastException">Thrown when the value represented by <paramref name="value" /> is not a <see cref="TestCases.JsonValue.Number" />.</exception>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static explicit operator TestCases.JsonValue.Number(TestCases.JsonValue value)
        {
            if (value._discriminator == 2)
            {
                return ((TestCases.JsonValue.Number)value._value);
            }
            else
            {
                throw new System.InvalidCastException();
            }
        }
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.JsonValue" /> class, using a <see cref="TestCases.JsonValue.Boolean" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.JsonValue" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public JsonValue(TestCases.JsonValue.Boolean value)
        {
            this._discriminator = 3;
            this._value = value;
        }
        
        /// <summary>
        /// Determines if the current <see cref="TestCases.JsonValue" /> instance represents a <see cref="TestCases.JsonValue.Boolean" /> or not.
        /// </summary>
        /// <param name="value">The <see cref="TestCases.JsonValue.Boolean" /> value this wraps if this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Boolean" />, otherwise the default value of <see cref="TestCases.JsonValue.Boolean" />.</param>
        /// <returns><c>true</c> if this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Boolean" />; otherwise <c>false</c>.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public System.Boolean IsBoolean(out TestCases.JsonValue.Boolean value)
        {
            if (this._discriminator == 3)
            {
                value = ((TestCases.JsonValue.Boolean)this._value);
                return true;
            }
            else
            {
                value = default(TestCases.JsonValue.Boolean);
                return false;
            }
        }
        
        /// <summary>
        /// Determines if the current <see cref="TestCases.JsonValue" /> instance represents a <see cref="TestCases.JsonValue.Boolean" /> or not.
        /// </summary>
        /// <returns><c>true</c> if this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Boolean" />; otherwise <c>false</c>.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public System.Boolean IsBoolean()
        {
            return this._discriminator == 3;
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Boolean" />; otherwise the default value of <see cref="TestCases.JsonValue.Boolean" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Boolean" />; otherwise the default value of <see cref="TestCases.JsonValue.Boolean" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.JsonValue.Boolean AsBooleanOrDefault()
        {
            if (this._discriminator == 3)
            {
                return ((TestCases.JsonValue.Boolean)this._value);
            }
            else
            {
                return default(TestCases.JsonValue.Boolean);
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Boolean" />; otherwise <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Boolean" />; otherwise <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.JsonValue.Boolean AsBooleanOrDefault(TestCases.JsonValue.Boolean @default)
        {
            if (this._discriminator == 3)
            {
                return ((TestCases.JsonValue.Boolean)this._value);
            }
            else
            {
                return @default;
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Boolean" />; otherwise the result of invoking <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Boolean" />; otherwise the result of invoking <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.JsonValue.Boolean AsBooleanOrDefault(System.Func<TestCases.JsonValue.Boolean> @default)
        {
            if (this._discriminator == 3)
            {
                return ((TestCases.JsonValue.Boolean)this._value);
            }
            else
            {
                return @default();
            }
        }
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.JsonValue" /> class, using a <see cref="TestCases.JsonValue.Boolean" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.JsonValue" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static implicit operator TestCases.JsonValue(TestCases.JsonValue.Boolean value)
        {
            return new TestCases.JsonValue(value);
        }
        
        /// <summary>
        /// Returns the value that <paramref name="value" /> represents if it is a <see cref="TestCases.JsonValue.Boolean" />
        /// </summary>
        /// <returns>the value that <paramref name="value" /> represents if it is a <see cref="TestCases.JsonValue.Boolean" />.</returns>
        /// <exception cref="System.InvalidCastException">Thrown when the value represented by <paramref name="value" /> is not a <see cref="TestCases.JsonValue.Boolean" />.</exception>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static explicit operator TestCases.JsonValue.Boolean(TestCases.JsonValue value)
        {
            if (value._discriminator == 3)
            {
                return ((TestCases.JsonValue.Boolean)value._value);
            }
            else
            {
                throw new System.InvalidCastException();
            }
        }
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.JsonValue" /> class, using a <see cref="TestCases.JsonValue.Null" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.JsonValue" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public JsonValue(TestCases.JsonValue.Null value)
        {
            this._discriminator = 4;
            this._value = value;
        }
        
        /// <summary>
        /// Determines if the current <see cref="TestCases.JsonValue" /> instance represents a <see cref="TestCases.JsonValue.Null" /> or not.
        /// </summary>
        /// <param name="value">The <see cref="TestCases.JsonValue.Null" /> value this wraps if this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Null" />, otherwise the default value of <see cref="TestCases.JsonValue.Null" />.</param>
        /// <returns><c>true</c> if this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Null" />; otherwise <c>false</c>.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public System.Boolean IsNull(out TestCases.JsonValue.Null value)
        {
            if (this._discriminator == 4)
            {
                value = ((TestCases.JsonValue.Null)this._value);
                return true;
            }
            else
            {
                value = default(TestCases.JsonValue.Null);
                return false;
            }
        }
        
        /// <summary>
        /// Determines if the current <see cref="TestCases.JsonValue" /> instance represents a <see cref="TestCases.JsonValue.Null" /> or not.
        /// </summary>
        /// <returns><c>true</c> if this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Null" />; otherwise <c>false</c>.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public System.Boolean IsNull()
        {
            return this._discriminator == 4;
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Null" />; otherwise the default value of <see cref="TestCases.JsonValue.Null" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Null" />; otherwise the default value of <see cref="TestCases.JsonValue.Null" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.JsonValue.Null AsNullOrDefault()
        {
            if (this._discriminator == 4)
            {
                return ((TestCases.JsonValue.Null)this._value);
            }
            else
            {
                return default(TestCases.JsonValue.Null);
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Null" />; otherwise <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Null" />; otherwise <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.JsonValue.Null AsNullOrDefault(TestCases.JsonValue.Null @default)
        {
            if (this._discriminator == 4)
            {
                return ((TestCases.JsonValue.Null)this._value);
            }
            else
            {
                return @default;
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Null" />; otherwise the result of invoking <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Null" />; otherwise the result of invoking <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.JsonValue.Null AsNullOrDefault(System.Func<TestCases.JsonValue.Null> @default)
        {
            if (this._discriminator == 4)
            {
                return ((TestCases.JsonValue.Null)this._value);
            }
            else
            {
                return @default();
            }
        }
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.JsonValue" /> class, using a <see cref="TestCases.JsonValue.Null" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.JsonValue" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static implicit operator TestCases.JsonValue(TestCases.JsonValue.Null value)
        {
            return new TestCases.JsonValue(value);
        }
        
        /// <summary>
        /// Returns the value that <paramref name="value" /> represents if it is a <see cref="TestCases.JsonValue.Null" />
        /// </summary>
        /// <returns>the value that <paramref name="value" /> represents if it is a <see cref="TestCases.JsonValue.Null" />.</returns>
        /// <exception cref="System.InvalidCastException">Thrown when the value represented by <paramref name="value" /> is not a <see cref="TestCases.JsonValue.Null" />.</exception>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static explicit operator TestCases.JsonValue.Null(TestCases.JsonValue value)
        {
            if (value._discriminator == 4)
            {
                return ((TestCases.JsonValue.Null)value._value);
            }
            else
            {
                throw new System.InvalidCastException();
            }
        }
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.JsonValue" /> class, using a <see cref="TestCases.JsonValue.Array" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.JsonValue" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public JsonValue(TestCases.JsonValue.Array value)
        {
            this._discriminator = 5;
            this._value = value;
        }
        
        /// <summary>
        /// Determines if the current <see cref="TestCases.JsonValue" /> instance represents a <see cref="TestCases.JsonValue.Array" /> or not.
        /// </summary>
        /// <param name="value">The <see cref="TestCases.JsonValue.Array" /> value this wraps if this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Array" />, otherwise the default value of <see cref="TestCases.JsonValue.Array" />.</param>
        /// <returns><c>true</c> if this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Array" />; otherwise <c>false</c>.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public System.Boolean IsArray(out TestCases.JsonValue.Array value)
        {
            if (this._discriminator == 5)
            {
                value = ((TestCases.JsonValue.Array)this._value);
                return true;
            }
            else
            {
                value = default(TestCases.JsonValue.Array);
                return false;
            }
        }
        
        /// <summary>
        /// Determines if the current <see cref="TestCases.JsonValue" /> instance represents a <see cref="TestCases.JsonValue.Array" /> or not.
        /// </summary>
        /// <returns><c>true</c> if this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Array" />; otherwise <c>false</c>.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public System.Boolean IsArray()
        {
            return this._discriminator == 5;
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Array" />; otherwise the default value of <see cref="TestCases.JsonValue.Array" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Array" />; otherwise the default value of <see cref="TestCases.JsonValue.Array" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.JsonValue.Array AsArrayOrDefault()
        {
            if (this._discriminator == 5)
            {
                return ((TestCases.JsonValue.Array)this._value);
            }
            else
            {
                return default(TestCases.JsonValue.Array);
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Array" />; otherwise <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Array" />; otherwise <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.JsonValue.Array AsArrayOrDefault(TestCases.JsonValue.Array @default)
        {
            if (this._discriminator == 5)
            {
                return ((TestCases.JsonValue.Array)this._value);
            }
            else
            {
                return @default;
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Array" />; otherwise the result of invoking <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Array" />; otherwise the result of invoking <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.JsonValue.Array AsArrayOrDefault(System.Func<TestCases.JsonValue.Array> @default)
        {
            if (this._discriminator == 5)
            {
                return ((TestCases.JsonValue.Array)this._value);
            }
            else
            {
                return @default();
            }
        }
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.JsonValue" /> class, using a <see cref="TestCases.JsonValue.Array" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.JsonValue" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static implicit operator TestCases.JsonValue(TestCases.JsonValue.Array value)
        {
            return new TestCases.JsonValue(value);
        }
        
        /// <summary>
        /// Returns the value that <paramref name="value" /> represents if it is a <see cref="TestCases.JsonValue.Array" />
        /// </summary>
        /// <returns>the value that <paramref name="value" /> represents if it is a <see cref="TestCases.JsonValue.Array" />.</returns>
        /// <exception cref="System.InvalidCastException">Thrown when the value represented by <paramref name="value" /> is not a <see cref="TestCases.JsonValue.Array" />.</exception>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static explicit operator TestCases.JsonValue.Array(TestCases.JsonValue value)
        {
            if (value._discriminator == 5)
            {
                return ((TestCases.JsonValue.Array)value._value);
            }
            else
            {
                throw new System.InvalidCastException();
            }
        }
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.JsonValue" /> class, using a <see cref="TestCases.JsonValue.Object" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.JsonValue" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public JsonValue(TestCases.JsonValue.Object value)
        {
            this._discriminator = 6;
            this._value = value;
        }
        
        /// <summary>
        /// Determines if the current <see cref="TestCases.JsonValue" /> instance represents a <see cref="TestCases.JsonValue.Object" /> or not.
        /// </summary>
        /// <param name="value">The <see cref="TestCases.JsonValue.Object" /> value this wraps if this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Object" />, otherwise the default value of <see cref="TestCases.JsonValue.Object" />.</param>
        /// <returns><c>true</c> if this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Object" />; otherwise <c>false</c>.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public System.Boolean IsObject(out TestCases.JsonValue.Object value)
        {
            if (this._discriminator == 6)
            {
                value = ((TestCases.JsonValue.Object)this._value);
                return true;
            }
            else
            {
                value = default(TestCases.JsonValue.Object);
                return false;
            }
        }
        
        /// <summary>
        /// Determines if the current <see cref="TestCases.JsonValue" /> instance represents a <see cref="TestCases.JsonValue.Object" /> or not.
        /// </summary>
        /// <returns><c>true</c> if this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Object" />; otherwise <c>false</c>.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public System.Boolean IsObject()
        {
            return this._discriminator == 6;
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Object" />; otherwise the default value of <see cref="TestCases.JsonValue.Object" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Object" />; otherwise the default value of <see cref="TestCases.JsonValue.Object" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.JsonValue.Object AsObjectOrDefault()
        {
            if (this._discriminator == 6)
            {
                return ((TestCases.JsonValue.Object)this._value);
            }
            else
            {
                return default(TestCases.JsonValue.Object);
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Object" />; otherwise <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Object" />; otherwise <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.JsonValue.Object AsObjectOrDefault(TestCases.JsonValue.Object @default)
        {
            if (this._discriminator == 6)
            {
                return ((TestCases.JsonValue.Object)this._value);
            }
            else
            {
                return @default;
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Object" />; otherwise the result of invoking <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.JsonValue" /> represents if it is a <see cref="TestCases.JsonValue.Object" />; otherwise the result of invoking <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.JsonValue.Object AsObjectOrDefault(System.Func<TestCases.JsonValue.Object> @default)
        {
            if (this._discriminator == 6)
            {
                return ((TestCases.JsonValue.Object)this._value);
            }
            else
            {
                return @default();
            }
        }
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.JsonValue" /> class, using a <see cref="TestCases.JsonValue.Object" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.JsonValue" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static implicit operator TestCases.JsonValue(TestCases.JsonValue.Object value)
        {
            return new TestCases.JsonValue(value);
        }
        
        /// <summary>
        /// Returns the value that <paramref name="value" /> represents if it is a <see cref="TestCases.JsonValue.Object" />
        /// </summary>
        /// <returns>the value that <paramref name="value" /> represents if it is a <see cref="TestCases.JsonValue.Object" />.</returns>
        /// <exception cref="System.InvalidCastException">Thrown when the value represented by <paramref name="value" /> is not a <see cref="TestCases.JsonValue.Object" />.</exception>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static explicit operator TestCases.JsonValue.Object(TestCases.JsonValue value)
        {
            if (value._discriminator == 6)
            {
                return ((TestCases.JsonValue.Object)value._value);
            }
            else
            {
                throw new System.InvalidCastException();
            }
        }
    
        /// <summary>
        /// Invokes one of the delegates based on what type this <see cref="TestCases.JsonValue" /> represents.
        /// <list type="table">
        ///     <listheader>
        ///         <term>Delegate.</term>
        ///         <description>When it will be invoked.</description>
        ///     </listheader>
        ///     <item>
        ///         <term><paramref name="caseString" /></term>
        ///         <description>Invoked when this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.String" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseNumber" /></term>
        ///         <description>Invoked when this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Number" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseBoolean" /></term>
        ///         <description>Invoked when this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Boolean" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseNull" /></term>
        ///         <description>Invoked when this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Null" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseArray" /></term>
        ///         <description>Invoked when this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Array" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseObject" /></term>
        ///         <description>Invoked when this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Object" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="default" /></term>
        ///         <description>Invoked when the delegate that would have otherwise been invoked was null.</description>
        ///     </item>
        /// </list>
        /// </summary>
        /// <param name="default"></param>
        /// <param name="caseString">The delegate to invoke when the <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.String" />.</param>
        /// <param name="caseNumber">The delegate to invoke when the <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Number" />.</param>
        /// <param name="caseBoolean">The delegate to invoke when the <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Boolean" />.</param>
        /// <param name="caseNull">The delegate to invoke when the <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Null" />.</param>
        /// <param name="caseArray">The delegate to invoke when the <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Array" />.</param>
        /// <param name="caseObject">The delegate to invoke when the <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Object" />.</param>
        /// <exception cref="System.InvalidOperationException">Thrown when this <see cref="TestCases.JsonValue" /> is not a valid instance. This means that the <see cref="_discriminator" /> has been tampered with via reflection, or <see cref="TestCases.JsonValue" /> is a struct and this is the default value of <see cref="TestCases.JsonValue" />.</exception>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public void Switch
        (
            System.Action? @default,
            System.Action<TestCases.JsonValue.String>? caseString = null,
            System.Action<TestCases.JsonValue.Number>? caseNumber = null,
            System.Action<TestCases.JsonValue.Boolean>? caseBoolean = null,
            System.Action<TestCases.JsonValue.Null>? caseNull = null,
            System.Action<TestCases.JsonValue.Array>? caseArray = null,
            System.Action<TestCases.JsonValue.Object>? caseObject = null
        )
        {
            switch(this._discriminator)
            {
                case 0:
                    throw new System.InvalidOperationException("Union is not initialized.");
    
                case 1:
                    if (!System.Object.ReferenceEquals(caseString, null))
                    {
                        caseString.Invoke(((TestCases.JsonValue.String)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        @default.Invoke();
                    }
                    break;
                
                case 2:
                    if (!System.Object.ReferenceEquals(caseNumber, null))
                    {
                        caseNumber.Invoke(((TestCases.JsonValue.Number)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        @default.Invoke();
                    }
                    break;
                
                case 3:
                    if (!System.Object.ReferenceEquals(caseBoolean, null))
                    {
                        caseBoolean.Invoke(((TestCases.JsonValue.Boolean)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        @default.Invoke();
                    }
                    break;
                
                case 4:
                    if (!System.Object.ReferenceEquals(caseNull, null))
                    {
                        caseNull.Invoke(((TestCases.JsonValue.Null)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        @default.Invoke();
                    }
                    break;
                
                case 5:
                    if (!System.Object.ReferenceEquals(caseArray, null))
                    {
                        caseArray.Invoke(((TestCases.JsonValue.Array)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        @default.Invoke();
                    }
                    break;
                
                case 6:
                    if (!System.Object.ReferenceEquals(caseObject, null))
                    {
                        caseObject.Invoke(((TestCases.JsonValue.Object)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        @default.Invoke();
                    }
                    break;
                
                default:
                    throw new System.InvalidOperationException("Union is not valid");
            }
        }
    
        /// <summary>
        /// Invokes one of the delegates based on what type this <see cref="TestCases.JsonValue" /> represents.
        /// <list type="table">
        ///     <listheader>
        ///         <term>Delegate.</term>
        ///         <description>When it will be invoked.</description>
        ///     </listheader>
        ///     <item>
        ///         <term><paramref name="caseString" /></term>
        ///         <description>Invoked when this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.String" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseNumber" /></term>
        ///         <description>Invoked when this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Number" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseBoolean" /></term>
        ///         <description>Invoked when this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Boolean" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseNull" /></term>
        ///         <description>Invoked when this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Null" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseArray" /></term>
        ///         <description>Invoked when this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Array" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseObject" /></term>
        ///         <description>Invoked when this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Object" />.</description>
        ///     </item>
        /// </list>
        /// </summary>
        /// <param name="caseString">The delegate to invoke when the <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.String" />.</param>
        /// <param name="caseNumber">The delegate to invoke when the <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Number" />.</param>
        /// <param name="caseBoolean">The delegate to invoke when the <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Boolean" />.</param>
        /// <param name="caseNull">The delegate to invoke when the <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Null" />.</param>
        /// <param name="caseArray">The delegate to invoke when the <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Array" />.</param>
        /// <param name="caseObject">The delegate to invoke when the <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Object" />.</param>
        /// <exception cref="System.InvalidOperationException">Thrown when this <see cref="TestCases.JsonValue" /> is not a valid instance. This means that the <see cref="_discriminator" /> has been tampered with via reflection, or <see cref="TestCases.JsonValue" /> is a struct and this is the default value of <see cref="TestCases.JsonValue" />.</exception>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public void Switch
        (
            System.Action<TestCases.JsonValue.String>? caseString,
            System.Action<TestCases.JsonValue.Number>? caseNumber,
            System.Action<TestCases.JsonValue.Boolean>? caseBoolean,
            System.Action<TestCases.JsonValue.Null>? caseNull,
            System.Action<TestCases.JsonValue.Array>? caseArray,
            System.Action<TestCases.JsonValue.Object>? caseObject
        )
        {
            switch(this._discriminator)
            {
                case 0:
                    throw new System.InvalidOperationException("Union is not initialized");
    
                case 1:
                    if (!System.Object.ReferenceEquals(caseString, null))
                    {
                        caseString.Invoke(((TestCases.JsonValue.String)this._value));
                    }
                    break;
                
                case 2:
                    if (!System.Object.ReferenceEquals(caseNumber, null))
                    {
                        caseNumber.Invoke(((TestCases.JsonValue.Number)this._value));
                    }
                    break;
                
                case 3:
                    if (!System.Object.ReferenceEquals(caseBoolean, null))
                    {
                        caseBoolean.Invoke(((TestCases.JsonValue.Boolean)this._value));
                    }
                    break;
                
                case 4:
                    if (!System.Object.ReferenceEquals(caseNull, null))
                    {
                        caseNull.Invoke(((TestCases.JsonValue.Null)this._value));
                    }
                    break;
                
                case 5:
                    if (!System.Object.ReferenceEquals(caseArray, null))
                    {
                        caseArray.Invoke(((TestCases.JsonValue.Array)this._value));
                    }
                    break;
                
                case 6:
                    if (!System.Object.ReferenceEquals(caseObject, null))
                    {
                        caseObject.Invoke(((TestCases.JsonValue.Object)this._value));
                    }
                    break;
                
                default:
                    throw new System.InvalidOperationException("Union is not valid");
            }
        }
        /// <summary>
        /// Invokes one of the delegates based on what type this <see cref="TestCases.JsonValue" /> represents and returns its result.
        /// <list type="table">
        ///     <listheader>
        ///         <term>Delegate.</term>
        ///         <description>When it will be invoked.</description>
        ///     </listheader>
        ///     <item>
        ///         <term><paramref name="caseString" /></term>
        ///         <description>Invoked when this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.String" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseNumber" /></term>
        ///         <description>Invoked when this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Number" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseBoolean" /></term>
        ///         <description>Invoked when this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Boolean" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseNull" /></term>
        ///         <description>Invoked when this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Null" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseArray" /></term>
        ///         <description>Invoked when this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Array" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseObject" /></term>
        ///         <description>Invoked when this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Object" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="default" /></term>
        ///         <description>Invoked when the delegate that would have otherwise been invoked was null.</description>
        ///     </item>
        /// </list>
        /// </summary>
        /// <param name="default"></param>
        /// <param name="caseString">The delegate to invoke when the <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.String" />.</param>
        /// <param name="caseNumber">The delegate to invoke when the <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Number" />.</param>
        /// <param name="caseBoolean">The delegate to invoke when the <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Boolean" />.</param>
        /// <param name="caseNull">The delegate to invoke when the <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Null" />.</param>
        /// <param name="caseArray">The delegate to invoke when the <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Array" />.</param>
        /// <param name="caseObject">The delegate to invoke when the <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Object" />.</param>
        /// <returns>the result of invoking the relevant delegate.</returns>
        /// <exception cref="System.InvalidOperationException">Thrown when this <see cref="TestCases.JsonValue" /> is not a valid instance. This means that the <see cref="_discriminator" /> has been tampered with via reflection, or <see cref="TestCases.JsonValue" /> is a struct and this is the default value of <see cref="TestCases.JsonValue" />.</exception>
        /// <exception cref="System.ArgumentNullException">Thrown when both the delegate that should have been invoked and <paramref name="default" /> are null.</exception>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TMatchResult Match<TMatchResult>
        (
            System.Func<TMatchResult> @default,
            System.Func<TestCases.JsonValue.String, TMatchResult>? caseString = null,
            System.Func<TestCases.JsonValue.Number, TMatchResult>? caseNumber = null,
            System.Func<TestCases.JsonValue.Boolean, TMatchResult>? caseBoolean = null,
            System.Func<TestCases.JsonValue.Null, TMatchResult>? caseNull = null,
            System.Func<TestCases.JsonValue.Array, TMatchResult>? caseArray = null,
            System.Func<TestCases.JsonValue.Object, TMatchResult>? caseObject = null
        )
        {
            switch(this._discriminator)
            {
                case 0:
                    throw new System.InvalidOperationException("Union is not initialized");
    
                case 1:
                    if (!System.Object.ReferenceEquals(caseString, null))
                    {
                        return caseString.Invoke(((TestCases.JsonValue.String)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        return @default.Invoke();
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(@default));
                    }
                
                case 2:
                    if (!System.Object.ReferenceEquals(caseNumber, null))
                    {
                        return caseNumber.Invoke(((TestCases.JsonValue.Number)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        return @default.Invoke();
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(@default));
                    }
                
                case 3:
                    if (!System.Object.ReferenceEquals(caseBoolean, null))
                    {
                        return caseBoolean.Invoke(((TestCases.JsonValue.Boolean)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        return @default.Invoke();
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(@default));
                    }
                
                case 4:
                    if (!System.Object.ReferenceEquals(caseNull, null))
                    {
                        return caseNull.Invoke(((TestCases.JsonValue.Null)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        return @default.Invoke();
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(@default));
                    }
                
                case 5:
                    if (!System.Object.ReferenceEquals(caseArray, null))
                    {
                        return caseArray.Invoke(((TestCases.JsonValue.Array)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        return @default.Invoke();
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(@default));
                    }
                
                case 6:
                    if (!System.Object.ReferenceEquals(caseObject, null))
                    {
                        return caseObject.Invoke(((TestCases.JsonValue.Object)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        return @default.Invoke();
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(@default));
                    }
                
                default:
                    throw new System.InvalidOperationException("Union is not valid");
            }
        }
        /// <summary>
        /// Invokes one of the delegates based on what type this <see cref="TestCases.JsonValue" /> represents and returns its result.
        /// <list type="table">
        ///     <listheader>
        ///         <term>Delegate.</term>
        ///         <description>When it will be invoked.</description>
        ///     </listheader>
        ///     <item>
        ///         <term><paramref name="caseString" /></term>
        ///         <description>Invoked when this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.String" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseNumber" /></term>
        ///         <description>Invoked when this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Number" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseBoolean" /></term>
        ///         <description>Invoked when this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Boolean" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseNull" /></term>
        ///         <description>Invoked when this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Null" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseArray" /></term>
        ///         <description>Invoked when this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Array" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseObject" /></term>
        ///         <description>Invoked when this <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Object" />.</description>
        ///     </item>
        /// </list>
        /// </summary>
        /// <param name="caseString">The delegate to invoke when the <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.String" />.</param>
        /// <param name="caseNumber">The delegate to invoke when the <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Number" />.</param>
        /// <param name="caseBoolean">The delegate to invoke when the <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Boolean" />.</param>
        /// <param name="caseNull">The delegate to invoke when the <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Null" />.</param>
        /// <param name="caseArray">The delegate to invoke when the <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Array" />.</param>
        /// <param name="caseObject">The delegate to invoke when the <see cref="TestCases.JsonValue" /> represents a <see cref="TestCases.JsonValue.Object" />.</param>
        /// <returns>the result of invoking the relevant delegate.</returns>
        /// <exception cref="System.InvalidOperationException">Thrown when this <see cref="TestCases.JsonValue" /> is not a valid instance. This means that the <see cref="_discriminator" /> has been tampered with via reflection, or <see cref="TestCases.JsonValue" /> is a struct and this is the default value of <see cref="TestCases.JsonValue" />.</exception>
        /// <exception cref="System.ArgumentNullException">Thrown when the delegate that should have been invoked is null.</exception>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TMatchResult Match<TMatchResult>
        (
            System.Func<TestCases.JsonValue.String, TMatchResult> caseString,
            System.Func<TestCases.JsonValue.Number, TMatchResult> caseNumber,
            System.Func<TestCases.JsonValue.Boolean, TMatchResult> caseBoolean,
            System.Func<TestCases.JsonValue.Null, TMatchResult> caseNull,
            System.Func<TestCases.JsonValue.Array, TMatchResult> caseArray,
            System.Func<TestCases.JsonValue.Object, TMatchResult> caseObject
        )
        {
            switch(this._discriminator)
            {
                case 0:
                    throw new System.InvalidOperationException("Union is not initialized");
    
                case 1:
                    if (!System.Object.ReferenceEquals(caseString, null))
                    {
                        return caseString.Invoke(((TestCases.JsonValue.String)this._value));
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(caseString));
                    }
                
                case 2:
                    if (!System.Object.ReferenceEquals(caseNumber, null))
                    {
                        return caseNumber.Invoke(((TestCases.JsonValue.Number)this._value));
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(caseNumber));
                    }
                
                case 3:
                    if (!System.Object.ReferenceEquals(caseBoolean, null))
                    {
                        return caseBoolean.Invoke(((TestCases.JsonValue.Boolean)this._value));
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(caseBoolean));
                    }
                
                case 4:
                    if (!System.Object.ReferenceEquals(caseNull, null))
                    {
                        return caseNull.Invoke(((TestCases.JsonValue.Null)this._value));
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(caseNull));
                    }
                
                case 5:
                    if (!System.Object.ReferenceEquals(caseArray, null))
                    {
                        return caseArray.Invoke(((TestCases.JsonValue.Array)this._value));
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(caseArray));
                    }
                
                case 6:
                    if (!System.Object.ReferenceEquals(caseObject, null))
                    {
                        return caseObject.Invoke(((TestCases.JsonValue.Object)this._value));
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(caseObject));
                    }
                
                default:
                    throw new System.InvalidOperationException("Union is not valid");
            }
        }
    }
}