/* Diagnostics: 0 */

/* Sources: 1 */
/* File Path: DUnion\DUnion.SourceGenerator\TestCases.Result[TOk, TErr].g.cs */
// =============================================================
// This code was generated by the DUnion source generator.
// Changes to this file will be lost if the code is regenerated.
// =============================================================
#nullable enable
#pragma warning disable
namespace TestCases
{
    public readonly partial record struct Result<TOk, TErr> : System.IEquatable<TestCases.Result<TOk, TErr>>
    {
        /// <summary>
        /// A discriminator value which indicates what the type of <see cref="_value"/> is.
        /// <list type="table">
        ///     <listheader>
        ///         <term>Discriminator value.</term>
        ///         <description>The type that <see cref="_value"/> will contain.</description>
        ///     </listheader>
        ///     <item>
        ///         <term><c>1</c></term>
        ///         <description><see cref="TestCases.Result.Ok{TOk}" /></description>
        ///     </item>
        ///     <item>
        ///         <term><c>2</c></term>
        ///         <description><see cref="TestCases.Result.Err{TErr}" /></description>
        ///     </item>
        /// </list>
        /// </summary>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        private readonly System.Byte _discriminator;
    
        /// <summary>
        /// The underlying value that this union instance represents. Will be one of <see cref="TestCases.Result.Ok{TOk}" />, <see cref="TestCases.Result.Err{TErr}" />.
        /// </summary>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        private readonly System.Object? _value;
    
        /// <summary>
        /// Returns the string representation of the current value.
        /// </summary>
        /// <returns>the string representation of the current value.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public override System.String ToString()
        {
            return this._value?.ToString() ?? "";
        }
    
        /// <inheritdoc />
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public override System.Int32 GetHashCode()
        {
            return new System.ValueTuple<System.Byte, System.Object?>(this._discriminator, this._value).GetHashCode();
        }
    
        /// <summary>
        /// Determines whether the two <see cref="TestCases.Result{TOk, TErr}" /> instances are equal.
        /// </summary>
        /// <param name="left">The <see cref="TestCases.Result{TOk, TErr}" /> to compare to <paramref name="right"/>.</param>
        /// <param name="right">The <see cref="TestCases.Result{TOk, TErr}" /> to compare to <paramref name="left"/>.</param>
        /// <returns><c>true</c> if <paramref name="left"/> and <paramref name="right"/> are equal; otherwise <c>false</c>.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static System.Boolean Equals(TestCases.Result<TOk, TErr> left, TestCases.Result<TOk, TErr> right)
        {
            
            return left.Equals(right);
        }
    
        
    
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.Result{TOk, TErr}" /> class, using a <see cref="TestCases.Result.Ok{TOk}" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.Result{TOk, TErr}" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public Result(TestCases.Result.Ok<TOk> value)
        {
            this._discriminator = 1;
            this._value = value;
        }
        
        /// <summary>
        /// Determines if the current <see cref="TestCases.Result{TOk, TErr}" /> instance represents a <see cref="TestCases.Result.Ok{TOk}" /> or not.
        /// </summary>
        /// <param name="value">The <see cref="TestCases.Result.Ok{TOk}" /> value this wraps if this <see cref="TestCases.Result{TOk, TErr}" /> represents a <see cref="TestCases.Result.Ok{TOk}" />, otherwise the default value of <see cref="TestCases.Result.Ok{TOk}" />.</param>
        /// <returns><c>true</c> if this <see cref="TestCases.Result{TOk, TErr}" /> represents a <see cref="TestCases.Result.Ok{TOk}" />; otherwise <c>false</c>.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public System.Boolean IsOk(out TestCases.Result.Ok<TOk> value)
        {
            if (this._discriminator == 1)
            {
                value = ((TestCases.Result.Ok<TOk>)this._value);
                return true;
            }
            else
            {
                value = default(TestCases.Result.Ok<TOk>);
                return false;
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Result{TOk, TErr}" /> represents if it is a <see cref="TestCases.Result.Ok{TOk}" />; otherwise the default value of <see cref="TestCases.Result.Ok{TOk}" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Result{TOk, TErr}" /> represents if it is a <see cref="TestCases.Result.Ok{TOk}" />; otherwise the default value of <see cref="TestCases.Result.Ok{TOk}" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Result.Ok<TOk> AsOkOrDefault()
        {
            if (this._discriminator == 1)
            {
                return ((TestCases.Result.Ok<TOk>)this._value);
            }
            else
            {
                return default(TestCases.Result.Ok<TOk>);
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Result{TOk, TErr}" /> represents if it is a <see cref="TestCases.Result.Ok{TOk}" />; otherwise <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Result{TOk, TErr}" /> represents if it is a <see cref="TestCases.Result.Ok{TOk}" />; otherwise <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Result.Ok<TOk> AsOkOrDefault(TestCases.Result.Ok<TOk> @default)
        {
            if (this._discriminator == 1)
            {
                return ((TestCases.Result.Ok<TOk>)this._value);
            }
            else
            {
                return @default;
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Result{TOk, TErr}" /> represents if it is a <see cref="TestCases.Result.Ok{TOk}" />; otherwise the result of invoking <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Result{TOk, TErr}" /> represents if it is a <see cref="TestCases.Result.Ok{TOk}" />; otherwise the result of invoking <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Result.Ok<TOk> AsOkOrDefault(System.Func<TestCases.Result.Ok<TOk>> @default)
        {
            if (this._discriminator == 1)
            {
                return ((TestCases.Result.Ok<TOk>)this._value);
            }
            else
            {
                return @default();
            }
        }
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.Result{TOk, TErr}" /> class, using a <see cref="TestCases.Result.Ok{TOk}" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.Result{TOk, TErr}" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static implicit operator TestCases.Result<TOk, TErr>(TestCases.Result.Ok<TOk> value)
        {
            return new TestCases.Result<TOk, TErr>(value);
        }
        
        /// <summary>
        /// Returns the value that <paramref name="value" /> represents if it is a <see cref="TestCases.Result.Ok{TOk}" />
        /// </summary>
        /// <returns>the value that <paramref name="value" /> represents if it is a <see cref="TestCases.Result.Ok{TOk}" />.</returns>
        /// <exception cref="System.InvalidCastException">Thrown when the value represented by <paramref name="value" /> is not a <see cref="TestCases.Result.Ok{TOk}" />.</exception>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static explicit operator TestCases.Result.Ok<TOk>(TestCases.Result<TOk, TErr> value)
        {
            if (value._discriminator == 1)
            {
                return ((TestCases.Result.Ok<TOk>)value._value);
            }
            else
            {
                throw new System.InvalidCastException();
            }
        }
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.Result{TOk, TErr}" /> class, using a <see cref="TestCases.Result.Err{TErr}" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.Result{TOk, TErr}" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public Result(TestCases.Result.Err<TErr> value)
        {
            this._discriminator = 2;
            this._value = value;
        }
        
        /// <summary>
        /// Determines if the current <see cref="TestCases.Result{TOk, TErr}" /> instance represents a <see cref="TestCases.Result.Err{TErr}" /> or not.
        /// </summary>
        /// <param name="value">The <see cref="TestCases.Result.Err{TErr}" /> value this wraps if this <see cref="TestCases.Result{TOk, TErr}" /> represents a <see cref="TestCases.Result.Err{TErr}" />, otherwise the default value of <see cref="TestCases.Result.Err{TErr}" />.</param>
        /// <returns><c>true</c> if this <see cref="TestCases.Result{TOk, TErr}" /> represents a <see cref="TestCases.Result.Err{TErr}" />; otherwise <c>false</c>.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public System.Boolean IsErr(out TestCases.Result.Err<TErr> value)
        {
            if (this._discriminator == 2)
            {
                value = ((TestCases.Result.Err<TErr>)this._value);
                return true;
            }
            else
            {
                value = default(TestCases.Result.Err<TErr>);
                return false;
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Result{TOk, TErr}" /> represents if it is a <see cref="TestCases.Result.Err{TErr}" />; otherwise the default value of <see cref="TestCases.Result.Err{TErr}" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Result{TOk, TErr}" /> represents if it is a <see cref="TestCases.Result.Err{TErr}" />; otherwise the default value of <see cref="TestCases.Result.Err{TErr}" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Result.Err<TErr> AsErrOrDefault()
        {
            if (this._discriminator == 2)
            {
                return ((TestCases.Result.Err<TErr>)this._value);
            }
            else
            {
                return default(TestCases.Result.Err<TErr>);
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Result{TOk, TErr}" /> represents if it is a <see cref="TestCases.Result.Err{TErr}" />; otherwise <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Result{TOk, TErr}" /> represents if it is a <see cref="TestCases.Result.Err{TErr}" />; otherwise <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Result.Err<TErr> AsErrOrDefault(TestCases.Result.Err<TErr> @default)
        {
            if (this._discriminator == 2)
            {
                return ((TestCases.Result.Err<TErr>)this._value);
            }
            else
            {
                return @default;
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Result{TOk, TErr}" /> represents if it is a <see cref="TestCases.Result.Err{TErr}" />; otherwise the result of invoking <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Result{TOk, TErr}" /> represents if it is a <see cref="TestCases.Result.Err{TErr}" />; otherwise the result of invoking <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Result.Err<TErr> AsErrOrDefault(System.Func<TestCases.Result.Err<TErr>> @default)
        {
            if (this._discriminator == 2)
            {
                return ((TestCases.Result.Err<TErr>)this._value);
            }
            else
            {
                return @default();
            }
        }
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.Result{TOk, TErr}" /> class, using a <see cref="TestCases.Result.Err{TErr}" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.Result{TOk, TErr}" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static implicit operator TestCases.Result<TOk, TErr>(TestCases.Result.Err<TErr> value)
        {
            return new TestCases.Result<TOk, TErr>(value);
        }
        
        /// <summary>
        /// Returns the value that <paramref name="value" /> represents if it is a <see cref="TestCases.Result.Err{TErr}" />
        /// </summary>
        /// <returns>the value that <paramref name="value" /> represents if it is a <see cref="TestCases.Result.Err{TErr}" />.</returns>
        /// <exception cref="System.InvalidCastException">Thrown when the value represented by <paramref name="value" /> is not a <see cref="TestCases.Result.Err{TErr}" />.</exception>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static explicit operator TestCases.Result.Err<TErr>(TestCases.Result<TOk, TErr> value)
        {
            if (value._discriminator == 2)
            {
                return ((TestCases.Result.Err<TErr>)value._value);
            }
            else
            {
                throw new System.InvalidCastException();
            }
        }
    
        /// <summary>
        /// Invokes one of the delegates based on what type this <see cref="TestCases.Result{TOk, TErr}" /> represents.
        /// <list type="table">
        ///     <listheader>
        ///         <term>Delegate.</term>
        ///         <description>When it will be invoked.</description>
        ///     </listheader>
        ///     <item>
        ///         <term><paramref name="caseOk" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Result{TOk, TErr}" /> represents a <see cref="TestCases.Result.Ok{TOk}" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseErr" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Result{TOk, TErr}" /> represents a <see cref="TestCases.Result.Err{TErr}" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="default" /></term>
        ///         <description>Invoked when the delegate that would have otherwise been invoked was null.</description>
        ///     </item>
        /// </list>
        /// </summary>
        /// <param name="default"></param>
        /// <param name="caseOk">The delegate to invoke when the <see cref="TestCases.Result{TOk, TErr}" /> represents a <see cref="TestCases.Result.Ok{TOk}" />.</param>
        /// <param name="caseErr">The delegate to invoke when the <see cref="TestCases.Result{TOk, TErr}" /> represents a <see cref="TestCases.Result.Err{TErr}" />.</param>
        /// <exception cref="System.InvalidOperationException">Thrown when this <see cref="TestCases.Result{TOk, TErr}" /> is not a valid instance. This means that the <see cref="_discriminator" /> has been tampered with via reflection, or <see cref="TestCases.Result{TOk, TErr}" /> is a struct and this is the default value of <see cref="TestCases.Result{TOk, TErr}" />.</exception>
        /// <exception cref="System.ArgumentNullException">Thrown when both the delegate that should have been invoked and <paramref name="default" /> are null.</exception>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public void Switch
        (
            System.Action @default,
            System.Action<TestCases.Result.Ok<TOk>>? caseOk = null,
            System.Action<TestCases.Result.Err<TErr>>? caseErr = null
        )
        {
            switch(this._discriminator)
            {
                case 0:
                    throw new System.InvalidOperationException("Union is not initialized");
    
                case 1:
                    if (!System.Object.ReferenceEquals(caseOk, null))
                    {
                        caseOk.Invoke(((TestCases.Result.Ok<TOk>)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        @default.Invoke();
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(@default));
                    }
                    break;
                
                case 2:
                    if (!System.Object.ReferenceEquals(caseErr, null))
                    {
                        caseErr.Invoke(((TestCases.Result.Err<TErr>)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        @default.Invoke();
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(@default));
                    }
                    break;
                
                default:
                    throw new System.InvalidOperationException("Union is not valid");
            }
        }
    
        /// <summary>
        /// Invokes one of the delegates based on what type this <see cref="TestCases.Result{TOk, TErr}" /> represents.
        /// <list type="table">
        ///     <listheader>
        ///         <term>Delegate.</term>
        ///         <description>When it will be invoked.</description>
        ///     </listheader>
        ///     <item>
        ///         <term><paramref name="caseOk" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Result{TOk, TErr}" /> represents a <see cref="TestCases.Result.Ok{TOk}" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseErr" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Result{TOk, TErr}" /> represents a <see cref="TestCases.Result.Err{TErr}" />.</description>
        ///     </item>
        /// </list>
        /// </summary>
        /// <param name="caseOk">The delegate to invoke when the <see cref="TestCases.Result{TOk, TErr}" /> represents a <see cref="TestCases.Result.Ok{TOk}" />.</param>
        /// <param name="caseErr">The delegate to invoke when the <see cref="TestCases.Result{TOk, TErr}" /> represents a <see cref="TestCases.Result.Err{TErr}" />.</param>
        /// <exception cref="System.InvalidOperationException">Thrown when this <see cref="TestCases.Result{TOk, TErr}" /> is not a valid instance. This means that the <see cref="_discriminator" /> has been tampered with via reflection, or <see cref="TestCases.Result{TOk, TErr}" /> is a struct and this is the default value of <see cref="TestCases.Result{TOk, TErr}" />.</exception>
        /// <exception cref="System.ArgumentNullException">Thrown when the delegate that should have been invoked is null.</exception>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public void Switch
        (
            System.Action<TestCases.Result.Ok<TOk>> caseOk,
            System.Action<TestCases.Result.Err<TErr>> caseErr
        )
        {
            switch(this._discriminator)
            {
                case 0:
                    throw new System.InvalidOperationException("Union is not initialized");
    
                case 1:
                    if (!System.Object.ReferenceEquals(caseOk, null))
                    {
                        caseOk.Invoke(((TestCases.Result.Ok<TOk>)this._value));
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(caseOk));
                    }
                    break;
                
                case 2:
                    if (!System.Object.ReferenceEquals(caseErr, null))
                    {
                        caseErr.Invoke(((TestCases.Result.Err<TErr>)this._value));
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(caseErr));
                    }
                    break;
                
                default:
                    throw new System.InvalidOperationException("Union is not valid");
            }
        }
        /// <summary>
        /// Invokes one of the delegates based on what type this <see cref="TestCases.Result{TOk, TErr}" /> represents and returns its result.
        /// <list type="table">
        ///     <listheader>
        ///         <term>Delegate.</term>
        ///         <description>When it will be invoked.</description>
        ///     </listheader>
        ///     <item>
        ///         <term><paramref name="caseOk" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Result{TOk, TErr}" /> represents a <see cref="TestCases.Result.Ok{TOk}" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseErr" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Result{TOk, TErr}" /> represents a <see cref="TestCases.Result.Err{TErr}" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="default" /></term>
        ///         <description>Invoked when the delegate that would have otherwise been invoked was null.</description>
        ///     </item>
        /// </list>
        /// </summary>
        /// <param name="default"></param>
        /// <param name="caseOk">The delegate to invoke when the <see cref="TestCases.Result{TOk, TErr}" /> represents a <see cref="TestCases.Result.Ok{TOk}" />.</param>
        /// <param name="caseErr">The delegate to invoke when the <see cref="TestCases.Result{TOk, TErr}" /> represents a <see cref="TestCases.Result.Err{TErr}" />.</param>
        /// <returns>the result of invoking the relevant delegate.</returns>
        /// <exception cref="System.InvalidOperationException">Thrown when this <see cref="TestCases.Result{TOk, TErr}" /> is not a valid instance. This means that the <see cref="_discriminator" /> has been tampered with via reflection, or <see cref="TestCases.Result{TOk, TErr}" /> is a struct and this is the default value of <see cref="TestCases.Result{TOk, TErr}" />.</exception>
        /// <exception cref="System.ArgumentNullException">Thrown when both the delegate that should have been invoked and <paramref name="default" /> are null.</exception>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TMatchResult Match<TMatchResult>
        (
            System.Func<TMatchResult> @default,
            System.Func<TestCases.Result.Ok<TOk>, TMatchResult>? caseOk = null,
            System.Func<TestCases.Result.Err<TErr>, TMatchResult>? caseErr = null
        )
        {
            switch(this._discriminator)
            {
                case 0:
                    throw new System.InvalidOperationException("Union is not initialized");
    
                case 1:
                    if (!System.Object.ReferenceEquals(caseOk, null))
                    {
                        return caseOk.Invoke(((TestCases.Result.Ok<TOk>)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        return @default.Invoke();
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(@default));
                    }
                
                case 2:
                    if (!System.Object.ReferenceEquals(caseErr, null))
                    {
                        return caseErr.Invoke(((TestCases.Result.Err<TErr>)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        return @default.Invoke();
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(@default));
                    }
                
                default:
                    throw new System.InvalidOperationException("Union is not valid");
            }
        }
        /// <summary>
        /// Invokes one of the delegates based on what type this <see cref="TestCases.Result{TOk, TErr}" /> represents and returns its result.
        /// <list type="table">
        ///     <listheader>
        ///         <term>Delegate.</term>
        ///         <description>When it will be invoked.</description>
        ///     </listheader>
        ///     <item>
        ///         <term><paramref name="caseOk" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Result{TOk, TErr}" /> represents a <see cref="TestCases.Result.Ok{TOk}" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseErr" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Result{TOk, TErr}" /> represents a <see cref="TestCases.Result.Err{TErr}" />.</description>
        ///     </item>
        /// </list>
        /// </summary>
        /// <param name="caseOk">The delegate to invoke when the <see cref="TestCases.Result{TOk, TErr}" /> represents a <see cref="TestCases.Result.Ok{TOk}" />.</param>
        /// <param name="caseErr">The delegate to invoke when the <see cref="TestCases.Result{TOk, TErr}" /> represents a <see cref="TestCases.Result.Err{TErr}" />.</param>
        /// <returns>the result of invoking the relevant delegate.</returns>
        /// <exception cref="System.InvalidOperationException">Thrown when this <see cref="TestCases.Result{TOk, TErr}" /> is not a valid instance. This means that the <see cref="_discriminator" /> has been tampered with via reflection, or <see cref="TestCases.Result{TOk, TErr}" /> is a struct and this is the default value of <see cref="TestCases.Result{TOk, TErr}" />.</exception>
        /// <exception cref="System.ArgumentNullException">Thrown when the delegate that should have been invoked is null.</exception>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TMatchResult Match<TMatchResult>
        (
            System.Func<TestCases.Result.Ok<TOk>, TMatchResult> caseOk,
            System.Func<TestCases.Result.Err<TErr>, TMatchResult> caseErr
        )
        {
            switch(this._discriminator)
            {
                case 0:
                    throw new System.InvalidOperationException("Union is not initialized");
    
                case 1:
                    if (!System.Object.ReferenceEquals(caseOk, null))
                    {
                        return caseOk.Invoke(((TestCases.Result.Ok<TOk>)this._value));
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(caseOk));
                    }
                
                case 2:
                    if (!System.Object.ReferenceEquals(caseErr, null))
                    {
                        return caseErr.Invoke(((TestCases.Result.Err<TErr>)this._value));
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(caseErr));
                    }
                
                default:
                    throw new System.InvalidOperationException("Union is not valid");
            }
        }
    }
}