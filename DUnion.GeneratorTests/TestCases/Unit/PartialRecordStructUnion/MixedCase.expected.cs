/* Diagnostics: 0 */

/* Sources: 1 */
/* File Path: DUnion\DUnion.SourceGenerator\TestCases.Union.g.cs */
// =============================================================
// This code was generated by the DUnion source generator.
// Changes to this file will be lost if the code is regenerated.
// =============================================================
#nullable enable
#pragma warning disable
namespace TestCases
{
    public readonly partial record struct Union : System.IEquatable<TestCases.Union>
    {
        /// <summary>
        /// A discriminator value which indicates what the type of <see cref="_value"/> is.
        /// <list type="table">
        ///     <listheader>
        ///         <term>Discriminator value.</term>
        ///         <description>The type that <see cref="_value"/> will contain.</description>
        ///     </listheader>
        ///     <item>
        ///         <term><c>1</c></term>
        ///         <description><see cref="TestCases.Union.Case1" /></description>
        ///     </item>
        ///     <item>
        ///         <term><c>2</c></term>
        ///         <description><see cref="TestCases.Union.Case2" /></description>
        ///     </item>
        ///     <item>
        ///         <term><c>3</c></term>
        ///         <description><see cref="TestCases.Union.Case3" /></description>
        ///     </item>
        ///     <item>
        ///         <term><c>4</c></term>
        ///         <description><see cref="TestCases.Union.Case4" /></description>
        ///     </item>
        ///     <item>
        ///         <term><c>5</c></term>
        ///         <description><see cref="TestCases.Union.Case5" /></description>
        ///     </item>
        ///     <item>
        ///         <term><c>6</c></term>
        ///         <description><see cref="TestCases.Union.Case6" /></description>
        ///     </item>
        ///     <item>
        ///         <term><c>7</c></term>
        ///         <description><see cref="TestCases.Union.Case7" /></description>
        ///     </item>
        /// </list>
        /// </summary>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        private readonly System.Byte _discriminator;
    
        /// <summary>
        /// The underlying value that this union instance represents. Will be one of <see cref="TestCases.Union.Case1" />, <see cref="TestCases.Union.Case2" />, <see cref="TestCases.Union.Case3" />, <see cref="TestCases.Union.Case4" />, <see cref="TestCases.Union.Case5" />, <see cref="TestCases.Union.Case6" />, <see cref="TestCases.Union.Case7" />.
        /// </summary>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        private readonly System.Object? _value;
    
        /// <summary>
        /// Returns the string representation of the current value.
        /// </summary>
        /// <returns>the string representation of the current value.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public override System.String ToString()
        {
            return this._value?.ToString() ?? "";
        }
    
        /// <inheritdoc />
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public override System.Int32 GetHashCode()
        {
            return new System.ValueTuple<System.Byte, System.Object?>(this._discriminator, this._value).GetHashCode();
        }
    
        /// <summary>
        /// Determines whether the two <see cref="TestCases.Union" /> instances are equal.
        /// </summary>
        /// <param name="left">The <see cref="TestCases.Union" /> to compare to <paramref name="right"/>.</param>
        /// <param name="right">The <see cref="TestCases.Union" /> to compare to <paramref name="left"/>.</param>
        /// <returns><c>true</c> if <paramref name="left"/> and <paramref name="right"/> are equal; otherwise <c>false</c>.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static System.Boolean Equals(TestCases.Union left, TestCases.Union right)
        {
            
            return left.Equals(right);
        }
    
        
    
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.Union" /> class, using a <see cref="TestCases.Union.Case1" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.Union" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public Union(TestCases.Union.Case1 value)
        {
            this._discriminator = 1;
            this._value = value;
        }
        
        /// <summary>
        /// Determines if the current <see cref="TestCases.Union" /> instance represents a <see cref="TestCases.Union.Case1" /> or not.
        /// </summary>
        /// <param name="value">The <see cref="TestCases.Union.Case1" /> value this wraps if this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case1" />, otherwise the default value of <see cref="TestCases.Union.Case1" />.</param>
        /// <returns><c>true</c> if this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case1" />; otherwise <c>false</c>.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public System.Boolean IsCase1(out TestCases.Union.Case1 value)
        {
            if (this._discriminator == 1)
            {
                value = ((TestCases.Union.Case1)this._value);
                return true;
            }
            else
            {
                value = default(TestCases.Union.Case1);
                return false;
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case1" />; otherwise the default value of <see cref="TestCases.Union.Case1" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case1" />; otherwise the default value of <see cref="TestCases.Union.Case1" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Union.Case1? AsCase1OrDefault()
        {
            if (this._discriminator == 1)
            {
                return ((TestCases.Union.Case1)this._value);
            }
            else
            {
                return default(TestCases.Union.Case1);
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case1" />; otherwise <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case1" />; otherwise <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Union.Case1 AsCase1OrDefault(TestCases.Union.Case1 @default)
        {
            if (this._discriminator == 1)
            {
                return ((TestCases.Union.Case1)this._value);
            }
            else
            {
                return @default;
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case1" />; otherwise the result of invoking <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case1" />; otherwise the result of invoking <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Union.Case1 AsCase1OrDefault(System.Func<TestCases.Union.Case1> @default)
        {
            if (this._discriminator == 1)
            {
                return ((TestCases.Union.Case1)this._value);
            }
            else
            {
                return @default();
            }
        }
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.Union" /> class, using a <see cref="TestCases.Union.Case1" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.Union" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static implicit operator TestCases.Union(TestCases.Union.Case1 value)
        {
            return new TestCases.Union(value);
        }
        
        /// <summary>
        /// Returns the value that <paramref name="value" /> represents if it is a <see cref="TestCases.Union.Case1" />
        /// </summary>
        /// <returns>the value that <paramref name="value" /> represents if it is a <see cref="TestCases.Union.Case1" />.</returns>
        /// <exception cref="System.InvalidCastException">Thrown when the value represented by <paramref name="value" /> is not a <see cref="TestCases.Union.Case1" />.</exception>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static explicit operator TestCases.Union.Case1(TestCases.Union value)
        {
            if (value._discriminator == 1)
            {
                return ((TestCases.Union.Case1)value._value);
            }
            else
            {
                throw new System.InvalidCastException();
            }
        }
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.Union" /> class, using a <see cref="TestCases.Union.Case2" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.Union" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public Union(TestCases.Union.Case2 value)
        {
            this._discriminator = 2;
            this._value = value;
        }
        
        /// <summary>
        /// Determines if the current <see cref="TestCases.Union" /> instance represents a <see cref="TestCases.Union.Case2" /> or not.
        /// </summary>
        /// <param name="value">The <see cref="TestCases.Union.Case2" /> value this wraps if this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case2" />, otherwise the default value of <see cref="TestCases.Union.Case2" />.</param>
        /// <returns><c>true</c> if this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case2" />; otherwise <c>false</c>.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public System.Boolean IsCase2(out TestCases.Union.Case2 value)
        {
            if (this._discriminator == 2)
            {
                value = ((TestCases.Union.Case2)this._value);
                return true;
            }
            else
            {
                value = default(TestCases.Union.Case2);
                return false;
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case2" />; otherwise the default value of <see cref="TestCases.Union.Case2" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case2" />; otherwise the default value of <see cref="TestCases.Union.Case2" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Union.Case2? AsCase2OrDefault()
        {
            if (this._discriminator == 2)
            {
                return ((TestCases.Union.Case2)this._value);
            }
            else
            {
                return default(TestCases.Union.Case2);
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case2" />; otherwise <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case2" />; otherwise <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Union.Case2 AsCase2OrDefault(TestCases.Union.Case2 @default)
        {
            if (this._discriminator == 2)
            {
                return ((TestCases.Union.Case2)this._value);
            }
            else
            {
                return @default;
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case2" />; otherwise the result of invoking <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case2" />; otherwise the result of invoking <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Union.Case2 AsCase2OrDefault(System.Func<TestCases.Union.Case2> @default)
        {
            if (this._discriminator == 2)
            {
                return ((TestCases.Union.Case2)this._value);
            }
            else
            {
                return @default();
            }
        }
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.Union" /> class, using a <see cref="TestCases.Union.Case2" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.Union" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static implicit operator TestCases.Union(TestCases.Union.Case2 value)
        {
            return new TestCases.Union(value);
        }
        
        /// <summary>
        /// Returns the value that <paramref name="value" /> represents if it is a <see cref="TestCases.Union.Case2" />
        /// </summary>
        /// <returns>the value that <paramref name="value" /> represents if it is a <see cref="TestCases.Union.Case2" />.</returns>
        /// <exception cref="System.InvalidCastException">Thrown when the value represented by <paramref name="value" /> is not a <see cref="TestCases.Union.Case2" />.</exception>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static explicit operator TestCases.Union.Case2(TestCases.Union value)
        {
            if (value._discriminator == 2)
            {
                return ((TestCases.Union.Case2)value._value);
            }
            else
            {
                throw new System.InvalidCastException();
            }
        }
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.Union" /> class, using a <see cref="TestCases.Union.Case3" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.Union" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public Union(TestCases.Union.Case3 value)
        {
            this._discriminator = 3;
            this._value = value;
        }
        
        /// <summary>
        /// Determines if the current <see cref="TestCases.Union" /> instance represents a <see cref="TestCases.Union.Case3" /> or not.
        /// </summary>
        /// <param name="value">The <see cref="TestCases.Union.Case3" /> value this wraps if this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case3" />, otherwise the default value of <see cref="TestCases.Union.Case3" />.</param>
        /// <returns><c>true</c> if this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case3" />; otherwise <c>false</c>.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public System.Boolean IsCase3(out TestCases.Union.Case3 value)
        {
            if (this._discriminator == 3)
            {
                value = ((TestCases.Union.Case3)this._value);
                return true;
            }
            else
            {
                value = default(TestCases.Union.Case3);
                return false;
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case3" />; otherwise the default value of <see cref="TestCases.Union.Case3" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case3" />; otherwise the default value of <see cref="TestCases.Union.Case3" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Union.Case3 AsCase3OrDefault()
        {
            if (this._discriminator == 3)
            {
                return ((TestCases.Union.Case3)this._value);
            }
            else
            {
                return default(TestCases.Union.Case3);
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case3" />; otherwise <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case3" />; otherwise <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Union.Case3 AsCase3OrDefault(TestCases.Union.Case3 @default)
        {
            if (this._discriminator == 3)
            {
                return ((TestCases.Union.Case3)this._value);
            }
            else
            {
                return @default;
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case3" />; otherwise the result of invoking <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case3" />; otherwise the result of invoking <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Union.Case3 AsCase3OrDefault(System.Func<TestCases.Union.Case3> @default)
        {
            if (this._discriminator == 3)
            {
                return ((TestCases.Union.Case3)this._value);
            }
            else
            {
                return @default();
            }
        }
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.Union" /> class, using a <see cref="TestCases.Union.Case3" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.Union" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static implicit operator TestCases.Union(TestCases.Union.Case3 value)
        {
            return new TestCases.Union(value);
        }
        
        /// <summary>
        /// Returns the value that <paramref name="value" /> represents if it is a <see cref="TestCases.Union.Case3" />
        /// </summary>
        /// <returns>the value that <paramref name="value" /> represents if it is a <see cref="TestCases.Union.Case3" />.</returns>
        /// <exception cref="System.InvalidCastException">Thrown when the value represented by <paramref name="value" /> is not a <see cref="TestCases.Union.Case3" />.</exception>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static explicit operator TestCases.Union.Case3(TestCases.Union value)
        {
            if (value._discriminator == 3)
            {
                return ((TestCases.Union.Case3)value._value);
            }
            else
            {
                throw new System.InvalidCastException();
            }
        }
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.Union" /> class, using a <see cref="TestCases.Union.Case4" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.Union" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public Union(TestCases.Union.Case4 value)
        {
            this._discriminator = 4;
            this._value = value;
        }
        
        /// <summary>
        /// Determines if the current <see cref="TestCases.Union" /> instance represents a <see cref="TestCases.Union.Case4" /> or not.
        /// </summary>
        /// <param name="value">The <see cref="TestCases.Union.Case4" /> value this wraps if this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case4" />, otherwise the default value of <see cref="TestCases.Union.Case4" />.</param>
        /// <returns><c>true</c> if this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case4" />; otherwise <c>false</c>.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public System.Boolean IsCase4(out TestCases.Union.Case4 value)
        {
            if (this._discriminator == 4)
            {
                value = ((TestCases.Union.Case4)this._value);
                return true;
            }
            else
            {
                value = default(TestCases.Union.Case4);
                return false;
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case4" />; otherwise the default value of <see cref="TestCases.Union.Case4" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case4" />; otherwise the default value of <see cref="TestCases.Union.Case4" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Union.Case4? AsCase4OrDefault()
        {
            if (this._discriminator == 4)
            {
                return ((TestCases.Union.Case4)this._value);
            }
            else
            {
                return default(TestCases.Union.Case4);
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case4" />; otherwise <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case4" />; otherwise <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Union.Case4 AsCase4OrDefault(TestCases.Union.Case4 @default)
        {
            if (this._discriminator == 4)
            {
                return ((TestCases.Union.Case4)this._value);
            }
            else
            {
                return @default;
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case4" />; otherwise the result of invoking <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case4" />; otherwise the result of invoking <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Union.Case4 AsCase4OrDefault(System.Func<TestCases.Union.Case4> @default)
        {
            if (this._discriminator == 4)
            {
                return ((TestCases.Union.Case4)this._value);
            }
            else
            {
                return @default();
            }
        }
        
        
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.Union" /> class, using a <see cref="TestCases.Union.Case5" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.Union" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public Union(TestCases.Union.Case5 value)
        {
            this._discriminator = 5;
            this._value = value;
        }
        
        /// <summary>
        /// Determines if the current <see cref="TestCases.Union" /> instance represents a <see cref="TestCases.Union.Case5" /> or not.
        /// </summary>
        /// <param name="value">The <see cref="TestCases.Union.Case5" /> value this wraps if this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case5" />, otherwise the default value of <see cref="TestCases.Union.Case5" />.</param>
        /// <returns><c>true</c> if this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case5" />; otherwise <c>false</c>.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public System.Boolean IsCase5(out TestCases.Union.Case5 value)
        {
            if (this._discriminator == 5)
            {
                value = ((TestCases.Union.Case5)this._value);
                return true;
            }
            else
            {
                value = default(TestCases.Union.Case5);
                return false;
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case5" />; otherwise the default value of <see cref="TestCases.Union.Case5" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case5" />; otherwise the default value of <see cref="TestCases.Union.Case5" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Union.Case5? AsCase5OrDefault()
        {
            if (this._discriminator == 5)
            {
                return ((TestCases.Union.Case5)this._value);
            }
            else
            {
                return default(TestCases.Union.Case5);
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case5" />; otherwise <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case5" />; otherwise <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Union.Case5 AsCase5OrDefault(TestCases.Union.Case5 @default)
        {
            if (this._discriminator == 5)
            {
                return ((TestCases.Union.Case5)this._value);
            }
            else
            {
                return @default;
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case5" />; otherwise the result of invoking <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case5" />; otherwise the result of invoking <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Union.Case5 AsCase5OrDefault(System.Func<TestCases.Union.Case5> @default)
        {
            if (this._discriminator == 5)
            {
                return ((TestCases.Union.Case5)this._value);
            }
            else
            {
                return @default();
            }
        }
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.Union" /> class, using a <see cref="TestCases.Union.Case5" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.Union" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static implicit operator TestCases.Union(TestCases.Union.Case5 value)
        {
            return new TestCases.Union(value);
        }
        
        /// <summary>
        /// Returns the value that <paramref name="value" /> represents if it is a <see cref="TestCases.Union.Case5" />
        /// </summary>
        /// <returns>the value that <paramref name="value" /> represents if it is a <see cref="TestCases.Union.Case5" />.</returns>
        /// <exception cref="System.InvalidCastException">Thrown when the value represented by <paramref name="value" /> is not a <see cref="TestCases.Union.Case5" />.</exception>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static explicit operator TestCases.Union.Case5(TestCases.Union value)
        {
            if (value._discriminator == 5)
            {
                return ((TestCases.Union.Case5)value._value);
            }
            else
            {
                throw new System.InvalidCastException();
            }
        }
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.Union" /> class, using a <see cref="TestCases.Union.Case6" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.Union" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public Union(TestCases.Union.Case6 value)
        {
            this._discriminator = 6;
            this._value = value;
        }
        
        /// <summary>
        /// Determines if the current <see cref="TestCases.Union" /> instance represents a <see cref="TestCases.Union.Case6" /> or not.
        /// </summary>
        /// <param name="value">The <see cref="TestCases.Union.Case6" /> value this wraps if this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case6" />, otherwise the default value of <see cref="TestCases.Union.Case6" />.</param>
        /// <returns><c>true</c> if this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case6" />; otherwise <c>false</c>.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public System.Boolean IsCase6(out TestCases.Union.Case6 value)
        {
            if (this._discriminator == 6)
            {
                value = ((TestCases.Union.Case6)this._value);
                return true;
            }
            else
            {
                value = default(TestCases.Union.Case6);
                return false;
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case6" />; otherwise the default value of <see cref="TestCases.Union.Case6" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case6" />; otherwise the default value of <see cref="TestCases.Union.Case6" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Union.Case6 AsCase6OrDefault()
        {
            if (this._discriminator == 6)
            {
                return ((TestCases.Union.Case6)this._value);
            }
            else
            {
                return default(TestCases.Union.Case6);
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case6" />; otherwise <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case6" />; otherwise <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Union.Case6 AsCase6OrDefault(TestCases.Union.Case6 @default)
        {
            if (this._discriminator == 6)
            {
                return ((TestCases.Union.Case6)this._value);
            }
            else
            {
                return @default;
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case6" />; otherwise the result of invoking <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case6" />; otherwise the result of invoking <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Union.Case6 AsCase6OrDefault(System.Func<TestCases.Union.Case6> @default)
        {
            if (this._discriminator == 6)
            {
                return ((TestCases.Union.Case6)this._value);
            }
            else
            {
                return @default();
            }
        }
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.Union" /> class, using a <see cref="TestCases.Union.Case6" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.Union" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static implicit operator TestCases.Union(TestCases.Union.Case6 value)
        {
            return new TestCases.Union(value);
        }
        
        /// <summary>
        /// Returns the value that <paramref name="value" /> represents if it is a <see cref="TestCases.Union.Case6" />
        /// </summary>
        /// <returns>the value that <paramref name="value" /> represents if it is a <see cref="TestCases.Union.Case6" />.</returns>
        /// <exception cref="System.InvalidCastException">Thrown when the value represented by <paramref name="value" /> is not a <see cref="TestCases.Union.Case6" />.</exception>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static explicit operator TestCases.Union.Case6(TestCases.Union value)
        {
            if (value._discriminator == 6)
            {
                return ((TestCases.Union.Case6)value._value);
            }
            else
            {
                throw new System.InvalidCastException();
            }
        }
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.Union" /> class, using a <see cref="TestCases.Union.Case7" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.Union" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public Union(TestCases.Union.Case7 value)
        {
            this._discriminator = 7;
            this._value = value;
        }
        
        /// <summary>
        /// Determines if the current <see cref="TestCases.Union" /> instance represents a <see cref="TestCases.Union.Case7" /> or not.
        /// </summary>
        /// <param name="value">The <see cref="TestCases.Union.Case7" /> value this wraps if this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case7" />, otherwise the default value of <see cref="TestCases.Union.Case7" />.</param>
        /// <returns><c>true</c> if this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case7" />; otherwise <c>false</c>.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public System.Boolean IsCase7(out TestCases.Union.Case7 value)
        {
            if (this._discriminator == 7)
            {
                value = ((TestCases.Union.Case7)this._value);
                return true;
            }
            else
            {
                value = default(TestCases.Union.Case7);
                return false;
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case7" />; otherwise the default value of <see cref="TestCases.Union.Case7" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case7" />; otherwise the default value of <see cref="TestCases.Union.Case7" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Union.Case7 AsCase7OrDefault()
        {
            if (this._discriminator == 7)
            {
                return ((TestCases.Union.Case7)this._value);
            }
            else
            {
                return default(TestCases.Union.Case7);
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case7" />; otherwise <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case7" />; otherwise <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Union.Case7 AsCase7OrDefault(TestCases.Union.Case7 @default)
        {
            if (this._discriminator == 7)
            {
                return ((TestCases.Union.Case7)this._value);
            }
            else
            {
                return @default;
            }
        }
        
        /// <summary>
        /// Returns the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case7" />; otherwise the result of invoking <paramref name="default" />.
        /// </summary>
        /// <returns>the value this <see cref="TestCases.Union" /> represents if it is a <see cref="TestCases.Union.Case7" />; otherwise the result of invoking <paramref name="default" />.</returns>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TestCases.Union.Case7 AsCase7OrDefault(System.Func<TestCases.Union.Case7> @default)
        {
            if (this._discriminator == 7)
            {
                return ((TestCases.Union.Case7)this._value);
            }
            else
            {
                return @default();
            }
        }
        
        /// <summary>
        /// Creates a new instance of the <see cref="TestCases.Union" /> class, using a <see cref="TestCases.Union.Case7" /> as its value.
        /// </summary>
        /// <param name="value">The underlying value the <see cref="TestCases.Union" /> instance will wrap.</param>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static implicit operator TestCases.Union(TestCases.Union.Case7 value)
        {
            return new TestCases.Union(value);
        }
        
        /// <summary>
        /// Returns the value that <paramref name="value" /> represents if it is a <see cref="TestCases.Union.Case7" />
        /// </summary>
        /// <returns>the value that <paramref name="value" /> represents if it is a <see cref="TestCases.Union.Case7" />.</returns>
        /// <exception cref="System.InvalidCastException">Thrown when the value represented by <paramref name="value" /> is not a <see cref="TestCases.Union.Case7" />.</exception>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static explicit operator TestCases.Union.Case7(TestCases.Union value)
        {
            if (value._discriminator == 7)
            {
                return ((TestCases.Union.Case7)value._value);
            }
            else
            {
                throw new System.InvalidCastException();
            }
        }
    
        /// <summary>
        /// Invokes one of the delegates based on what type this <see cref="TestCases.Union" /> represents.
        /// <list type="table">
        ///     <listheader>
        ///         <term>Delegate.</term>
        ///         <description>When it will be invoked.</description>
        ///     </listheader>
        ///     <item>
        ///         <term><paramref name="caseCase1" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case1" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseCase2" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case2" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseCase3" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case3" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseCase4" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case4" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseCase5" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case5" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseCase6" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case6" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseCase7" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case7" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="default" /></term>
        ///         <description>Invoked when the delegate that would have otherwise been invoked was null.</description>
        ///     </item>
        /// </list>
        /// </summary>
        /// <param name="default"></param>
        /// <param name="caseCase1">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case1" />.</param>
        /// <param name="caseCase2">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case2" />.</param>
        /// <param name="caseCase3">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case3" />.</param>
        /// <param name="caseCase4">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case4" />.</param>
        /// <param name="caseCase5">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case5" />.</param>
        /// <param name="caseCase6">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case6" />.</param>
        /// <param name="caseCase7">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case7" />.</param>
        /// <exception cref="System.InvalidOperationException">Thrown when this <see cref="TestCases.Union" /> is not a valid instance. This means that the <see cref="_discriminator" /> has been tampered with via reflection, or <see cref="TestCases.Union" /> is a struct and this is the default value of <see cref="TestCases.Union" />.</exception>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public void Switch
        (
            System.Action? @default,
            System.Action<TestCases.Union.Case1>? caseCase1 = null,
            System.Action<TestCases.Union.Case2>? caseCase2 = null,
            System.Action<TestCases.Union.Case3>? caseCase3 = null,
            System.Action<TestCases.Union.Case4>? caseCase4 = null,
            System.Action<TestCases.Union.Case5>? caseCase5 = null,
            System.Action<TestCases.Union.Case6>? caseCase6 = null,
            System.Action<TestCases.Union.Case7>? caseCase7 = null
        )
        {
            switch(this._discriminator)
            {
                case 0:
                    throw new System.InvalidOperationException("Union is not initialized");
    
                case 1:
                    if (!System.Object.ReferenceEquals(caseCase1, null))
                    {
                        caseCase1.Invoke(((TestCases.Union.Case1)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        @default.Invoke();
                    }
                    break;
                
                case 2:
                    if (!System.Object.ReferenceEquals(caseCase2, null))
                    {
                        caseCase2.Invoke(((TestCases.Union.Case2)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        @default.Invoke();
                    }
                    break;
                
                case 3:
                    if (!System.Object.ReferenceEquals(caseCase3, null))
                    {
                        caseCase3.Invoke(((TestCases.Union.Case3)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        @default.Invoke();
                    }
                    break;
                
                case 4:
                    if (!System.Object.ReferenceEquals(caseCase4, null))
                    {
                        caseCase4.Invoke(((TestCases.Union.Case4)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        @default.Invoke();
                    }
                    break;
                
                case 5:
                    if (!System.Object.ReferenceEquals(caseCase5, null))
                    {
                        caseCase5.Invoke(((TestCases.Union.Case5)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        @default.Invoke();
                    }
                    break;
                
                case 6:
                    if (!System.Object.ReferenceEquals(caseCase6, null))
                    {
                        caseCase6.Invoke(((TestCases.Union.Case6)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        @default.Invoke();
                    }
                    break;
                
                case 7:
                    if (!System.Object.ReferenceEquals(caseCase7, null))
                    {
                        caseCase7.Invoke(((TestCases.Union.Case7)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        @default.Invoke();
                    }
                    break;
                
                default:
                    throw new System.InvalidOperationException("Union is not valid");
            }
        }
    
        /// <summary>
        /// Invokes one of the delegates based on what type this <see cref="TestCases.Union" /> represents.
        /// <list type="table">
        ///     <listheader>
        ///         <term>Delegate.</term>
        ///         <description>When it will be invoked.</description>
        ///     </listheader>
        ///     <item>
        ///         <term><paramref name="caseCase1" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case1" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseCase2" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case2" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseCase3" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case3" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseCase4" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case4" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseCase5" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case5" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseCase6" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case6" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseCase7" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case7" />.</description>
        ///     </item>
        /// </list>
        /// </summary>
        /// <param name="caseCase1">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case1" />.</param>
        /// <param name="caseCase2">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case2" />.</param>
        /// <param name="caseCase3">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case3" />.</param>
        /// <param name="caseCase4">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case4" />.</param>
        /// <param name="caseCase5">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case5" />.</param>
        /// <param name="caseCase6">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case6" />.</param>
        /// <param name="caseCase7">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case7" />.</param>
        /// <exception cref="System.InvalidOperationException">Thrown when this <see cref="TestCases.Union" /> is not a valid instance. This means that the <see cref="_discriminator" /> has been tampered with via reflection, or <see cref="TestCases.Union" /> is a struct and this is the default value of <see cref="TestCases.Union" />.</exception>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public void Switch
        (
            System.Action<TestCases.Union.Case1>? caseCase1,
            System.Action<TestCases.Union.Case2>? caseCase2,
            System.Action<TestCases.Union.Case3>? caseCase3,
            System.Action<TestCases.Union.Case4>? caseCase4,
            System.Action<TestCases.Union.Case5>? caseCase5,
            System.Action<TestCases.Union.Case6>? caseCase6,
            System.Action<TestCases.Union.Case7>? caseCase7
        )
        {
            switch(this._discriminator)
            {
                case 0:
                    throw new System.InvalidOperationException("Union is not initialized");
    
                case 1:
                    if (!System.Object.ReferenceEquals(caseCase1, null))
                    {
                        caseCase1.Invoke(((TestCases.Union.Case1)this._value));
                    }
                    break;
                
                case 2:
                    if (!System.Object.ReferenceEquals(caseCase2, null))
                    {
                        caseCase2.Invoke(((TestCases.Union.Case2)this._value));
                    }
                    break;
                
                case 3:
                    if (!System.Object.ReferenceEquals(caseCase3, null))
                    {
                        caseCase3.Invoke(((TestCases.Union.Case3)this._value));
                    }
                    break;
                
                case 4:
                    if (!System.Object.ReferenceEquals(caseCase4, null))
                    {
                        caseCase4.Invoke(((TestCases.Union.Case4)this._value));
                    }
                    break;
                
                case 5:
                    if (!System.Object.ReferenceEquals(caseCase5, null))
                    {
                        caseCase5.Invoke(((TestCases.Union.Case5)this._value));
                    }
                    break;
                
                case 6:
                    if (!System.Object.ReferenceEquals(caseCase6, null))
                    {
                        caseCase6.Invoke(((TestCases.Union.Case6)this._value));
                    }
                    break;
                
                case 7:
                    if (!System.Object.ReferenceEquals(caseCase7, null))
                    {
                        caseCase7.Invoke(((TestCases.Union.Case7)this._value));
                    }
                    break;
                
                default:
                    throw new System.InvalidOperationException("Union is not valid");
            }
        }
        /// <summary>
        /// Invokes one of the delegates based on what type this <see cref="TestCases.Union" /> represents and returns its result.
        /// <list type="table">
        ///     <listheader>
        ///         <term>Delegate.</term>
        ///         <description>When it will be invoked.</description>
        ///     </listheader>
        ///     <item>
        ///         <term><paramref name="caseCase1" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case1" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseCase2" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case2" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseCase3" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case3" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseCase4" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case4" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseCase5" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case5" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseCase6" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case6" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseCase7" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case7" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="default" /></term>
        ///         <description>Invoked when the delegate that would have otherwise been invoked was null.</description>
        ///     </item>
        /// </list>
        /// </summary>
        /// <param name="default"></param>
        /// <param name="caseCase1">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case1" />.</param>
        /// <param name="caseCase2">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case2" />.</param>
        /// <param name="caseCase3">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case3" />.</param>
        /// <param name="caseCase4">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case4" />.</param>
        /// <param name="caseCase5">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case5" />.</param>
        /// <param name="caseCase6">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case6" />.</param>
        /// <param name="caseCase7">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case7" />.</param>
        /// <returns>the result of invoking the relevant delegate.</returns>
        /// <exception cref="System.InvalidOperationException">Thrown when this <see cref="TestCases.Union" /> is not a valid instance. This means that the <see cref="_discriminator" /> has been tampered with via reflection, or <see cref="TestCases.Union" /> is a struct and this is the default value of <see cref="TestCases.Union" />.</exception>
        /// <exception cref="System.ArgumentNullException">Thrown when both the delegate that should have been invoked and <paramref name="default" /> are null.</exception>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TMatchResult Match<TMatchResult>
        (
            System.Func<TMatchResult> @default,
            System.Func<TestCases.Union.Case1, TMatchResult>? caseCase1 = null,
            System.Func<TestCases.Union.Case2, TMatchResult>? caseCase2 = null,
            System.Func<TestCases.Union.Case3, TMatchResult>? caseCase3 = null,
            System.Func<TestCases.Union.Case4, TMatchResult>? caseCase4 = null,
            System.Func<TestCases.Union.Case5, TMatchResult>? caseCase5 = null,
            System.Func<TestCases.Union.Case6, TMatchResult>? caseCase6 = null,
            System.Func<TestCases.Union.Case7, TMatchResult>? caseCase7 = null
        )
        {
            switch(this._discriminator)
            {
                case 0:
                    throw new System.InvalidOperationException("Union is not initialized");
    
                case 1:
                    if (!System.Object.ReferenceEquals(caseCase1, null))
                    {
                        return caseCase1.Invoke(((TestCases.Union.Case1)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        return @default.Invoke();
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(@default));
                    }
                
                case 2:
                    if (!System.Object.ReferenceEquals(caseCase2, null))
                    {
                        return caseCase2.Invoke(((TestCases.Union.Case2)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        return @default.Invoke();
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(@default));
                    }
                
                case 3:
                    if (!System.Object.ReferenceEquals(caseCase3, null))
                    {
                        return caseCase3.Invoke(((TestCases.Union.Case3)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        return @default.Invoke();
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(@default));
                    }
                
                case 4:
                    if (!System.Object.ReferenceEquals(caseCase4, null))
                    {
                        return caseCase4.Invoke(((TestCases.Union.Case4)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        return @default.Invoke();
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(@default));
                    }
                
                case 5:
                    if (!System.Object.ReferenceEquals(caseCase5, null))
                    {
                        return caseCase5.Invoke(((TestCases.Union.Case5)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        return @default.Invoke();
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(@default));
                    }
                
                case 6:
                    if (!System.Object.ReferenceEquals(caseCase6, null))
                    {
                        return caseCase6.Invoke(((TestCases.Union.Case6)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        return @default.Invoke();
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(@default));
                    }
                
                case 7:
                    if (!System.Object.ReferenceEquals(caseCase7, null))
                    {
                        return caseCase7.Invoke(((TestCases.Union.Case7)this._value));
                    }
                    else if (!System.Object.ReferenceEquals(@default, null))
                    {
                        return @default.Invoke();
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(@default));
                    }
                
                default:
                    throw new System.InvalidOperationException("Union is not valid");
            }
        }
        /// <summary>
        /// Invokes one of the delegates based on what type this <see cref="TestCases.Union" /> represents and returns its result.
        /// <list type="table">
        ///     <listheader>
        ///         <term>Delegate.</term>
        ///         <description>When it will be invoked.</description>
        ///     </listheader>
        ///     <item>
        ///         <term><paramref name="caseCase1" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case1" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseCase2" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case2" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseCase3" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case3" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseCase4" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case4" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseCase5" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case5" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseCase6" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case6" />.</description>
        ///     </item>
        ///     <item>
        ///         <term><paramref name="caseCase7" /></term>
        ///         <description>Invoked when this <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case7" />.</description>
        ///     </item>
        /// </list>
        /// </summary>
        /// <param name="caseCase1">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case1" />.</param>
        /// <param name="caseCase2">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case2" />.</param>
        /// <param name="caseCase3">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case3" />.</param>
        /// <param name="caseCase4">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case4" />.</param>
        /// <param name="caseCase5">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case5" />.</param>
        /// <param name="caseCase6">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case6" />.</param>
        /// <param name="caseCase7">The delegate to invoke when the <see cref="TestCases.Union" /> represents a <see cref="TestCases.Union.Case7" />.</param>
        /// <returns>the result of invoking the relevant delegate.</returns>
        /// <exception cref="System.InvalidOperationException">Thrown when this <see cref="TestCases.Union" /> is not a valid instance. This means that the <see cref="_discriminator" /> has been tampered with via reflection, or <see cref="TestCases.Union" /> is a struct and this is the default value of <see cref="TestCases.Union" />.</exception>
        /// <exception cref="System.ArgumentNullException">Thrown when the delegate that should have been invoked is null.</exception>
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TMatchResult Match<TMatchResult>
        (
            System.Func<TestCases.Union.Case1, TMatchResult> caseCase1,
            System.Func<TestCases.Union.Case2, TMatchResult> caseCase2,
            System.Func<TestCases.Union.Case3, TMatchResult> caseCase3,
            System.Func<TestCases.Union.Case4, TMatchResult> caseCase4,
            System.Func<TestCases.Union.Case5, TMatchResult> caseCase5,
            System.Func<TestCases.Union.Case6, TMatchResult> caseCase6,
            System.Func<TestCases.Union.Case7, TMatchResult> caseCase7
        )
        {
            switch(this._discriminator)
            {
                case 0:
                    throw new System.InvalidOperationException("Union is not initialized");
    
                case 1:
                    if (!System.Object.ReferenceEquals(caseCase1, null))
                    {
                        return caseCase1.Invoke(((TestCases.Union.Case1)this._value));
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(caseCase1));
                    }
                
                case 2:
                    if (!System.Object.ReferenceEquals(caseCase2, null))
                    {
                        return caseCase2.Invoke(((TestCases.Union.Case2)this._value));
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(caseCase2));
                    }
                
                case 3:
                    if (!System.Object.ReferenceEquals(caseCase3, null))
                    {
                        return caseCase3.Invoke(((TestCases.Union.Case3)this._value));
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(caseCase3));
                    }
                
                case 4:
                    if (!System.Object.ReferenceEquals(caseCase4, null))
                    {
                        return caseCase4.Invoke(((TestCases.Union.Case4)this._value));
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(caseCase4));
                    }
                
                case 5:
                    if (!System.Object.ReferenceEquals(caseCase5, null))
                    {
                        return caseCase5.Invoke(((TestCases.Union.Case5)this._value));
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(caseCase5));
                    }
                
                case 6:
                    if (!System.Object.ReferenceEquals(caseCase6, null))
                    {
                        return caseCase6.Invoke(((TestCases.Union.Case6)this._value));
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(caseCase6));
                    }
                
                case 7:
                    if (!System.Object.ReferenceEquals(caseCase7, null))
                    {
                        return caseCase7.Invoke(((TestCases.Union.Case7)this._value));
                    }
                    else
                    {
                        throw new System.ArgumentNullException(nameof(caseCase7));
                    }
                
                default:
                    throw new System.InvalidOperationException("Union is not valid");
            }
        }
    }
}