/* Diagnostics: 0 */

/* Sources: 1 */
/* File Path: DUnion\DUnion.SourceGenerator\Wrapped.Valid.CaseInterface.Union.DUnion.g.cs */
// =============================================================
// This code was generated by the DUnion source generator.
// Changes to this file will be lost if the code is regenerated.
// =============================================================
#pragma warning disable
#nullable enable


namespace Wrapped.Valid.CaseInterface
{
    partial record struct Union
    {
        /// <summary>A value used to discriminate what this instance represents.</summary>
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        [global::System.Diagnostics.DebuggerBrowsableAttribute(global::System.Diagnostics.DebuggerBrowsableState.Never)]
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        public global::System.Byte @Discriminator { get; }
    
        /// <summary>The underlying value this represents.</summary>
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        public global::System.Object @UnderlyingValue { get; }
    
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private Union(global::System.Byte discriminator, global::System.Object value)
        {
            this.@Discriminator = discriminator;
            this.@UnderlyingValue = value;
        }
        
        /// <summary>
        /// Creates a <see cref="Union"/> which wraps a <see cref="ICase"/>.
        /// </summary>
        /// <param name="value">The <see cref="ICase"/> to wrap</param>
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public Union(ICase value) : this(1, value)
        {
        }
    
        /// <summary>
        /// Calls the appropriate delegate for the current type.
        /// <list type="bullet">
        /// <item>Calls <paramref name="caseICase"/> if this is a <see cref="ICase"/></item>
        /// <item>Calls <paramref name="default"/> if the appropriate case* delegate wasnt provided.</item>
        /// </list>
        /// </summary>
        /// <param name="caseICase">Called if this is a <see cref="ICase"/></param>
        /// <param name="default">Called if a delegate was not provided for this type</param>
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public void Switch(global::System.Action @default, global::System.Action<ICase>? caseICase = null)
        {
            switch (this.@Discriminator)
            {
                case 0:
                    throw new global::System.InvalidOperationException("Union has not been initialized");
                case 1:
                    if (!global::System.Object.ReferenceEquals(caseICase, null))
                        caseICase((ICase)this.@UnderlyingValue!);
                    else if (!global::System.Object.ReferenceEquals(@default, null))
                        @default();
                    else
                        throw new global::System.ArgumentNullException(nameof(@default));
                    break;
                default:
                    throw new global::System.InvalidOperationException($"Unsupported discriminator value {Discriminator}");
            }
        }
    
        /// <summary>
        /// Calls the appropriate delegate for the current type.
        /// <list type="bullet">
        /// <item>Calls <paramref name="caseICase"/> if this is a <see cref="ICase"/></item>
        /// <item>Calls <paramref name="default"/> if the appropriate case* delegate wasnt provided.</item>
        /// </list>
        /// </summary>
        /// <param name="caseICase">Called if this is a <see cref="ICase"/></param>
        /// <param name="default">Called if a delegate was not provided for this type</param>
        /// <returns>The value returned from the matched delegate</returns>
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TMatchResult Match<TMatchResult>(global::System.Func<TMatchResult> @default, global::System.Func<ICase, TMatchResult>? caseICase = null)
        {
            switch (this.@Discriminator)
            {
                case 0:
                    throw new global::System.InvalidOperationException("Union has not been initialized");
                case 1:
                    if (!global::System.Object.ReferenceEquals(caseICase, null))
                        return caseICase((ICase)this.@UnderlyingValue!);
                    if (!global::System.Object.ReferenceEquals(@default, null))
                        return @default();
                    throw new global::System.ArgumentNullException(nameof(@default));
                default:
                    throw new global::System.InvalidOperationException($"Unsupported discriminator value {Discriminator}");
            }
        }
    
        /// <summary>
        /// Calls the appropriate delegate for the current type.
        /// <list type="bullet">
        /// <item>Calls <paramref name="caseICase"/> if this is a <see cref="ICase"/></item>
        /// </list>
        /// </summary>
        /// <param name="caseICase">Called if this is a <see cref="ICase"/></param>
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public void Switch(global::System.Action<ICase> caseICase)
        {
            switch (this.@Discriminator)
            {
                case 0:
                    throw new global::System.InvalidOperationException("Union has not been initialized");
                case 1:
                    if (global::System.Object.ReferenceEquals(caseICase, null))
                        throw new global::System.ArgumentNullException(nameof(caseICase));
                    caseICase((ICase)this.@UnderlyingValue!);
                    break;
                default:
                    throw new global::System.InvalidOperationException($"Unsupported discriminator value {Discriminator}");
            }
        }
    
        /// <summary>
        /// Calls the appropriate delegate for the current type.
        /// <list type="bullet">
        /// <item>Calls <paramref name="caseICase"/> if this is a <see cref="ICase"/></item>
        /// </list>
        /// </summary>
        /// <param name="caseICase">Called if this is a <see cref="ICase"/></param>
        /// <returns>The value returned from the matched delegate</returns>
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TMatchResult Match<TMatchResult>(global::System.Func<ICase, TMatchResult> caseICase)
        {
            switch (this.@Discriminator)
            {
                case 0:
                    throw new global::System.InvalidOperationException("Union has not been initialized");
                case 1:
                    if (global::System.Object.ReferenceEquals(caseICase, null))
                        throw new global::System.ArgumentNullException(nameof(caseICase));
                    return caseICase((ICase)this.@UnderlyingValue!);
                default:
                    throw new global::System.InvalidOperationException($"Unsupported discriminator value {Discriminator}");
            }
        }
    
        
        /// <summary>
        /// If the current value is a <see cref="ICase"/> then <paramref name="asICase"/> will be set to it and <c>true</c> will be returned,
        /// otherwise <paramref name="ICase"/> will be set to <c>default(<see cref="ICase"/>)</c> and <c>false</c> will be returned
        /// </summary>
        /// <param name="asICase">The current value if this is a <see cref="ICase"/>, otherwise <c>default(<see cref="ICase"/>)</c></param>
        /// <returns><c>true</c> if the current value is a <see cref="ICase"/>, otherwise <c>false</c></returns>
        public bool IsICase([global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(true)]out ICase asICase)
        {
            if (this.@Discriminator != 1)
            {
                asICase = default(ICase);
                return false;
            }
            asICase = (ICase)this.@UnderlyingValue;
            return true;
        }
        
        
    }
}