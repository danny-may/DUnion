/* Diagnostics: 0 */

/* Sources: 1 */
/* File Path: DUnion\DUnion.SourceGenerator\SubTyped.Valid.Result.Result`2.DUnion.g.cs */
// =============================================================
// This code was generated by the DUnion source generator.
// Changes to this file will be lost if the code is regenerated.
// =============================================================
#pragma warning disable
#nullable enable


namespace SubTyped.Valid.Result
{
    abstract partial record Result<TOk,TErr>
    {
        /// <summary>A value used to discriminate what this instance represents.</summary>
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        [global::System.Diagnostics.DebuggerBrowsableAttribute(global::System.Diagnostics.DebuggerBrowsableState.Never)]
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        public abstract global::System.Byte @Discriminator { get; }
    
        public Result<TOk,TErr> @UnderlyingValue => this;
    
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private Result()
        {
        }
    
        /// <summary>
        /// Calls the appropriate delegate for the current type.
        /// <list type="bullet">
        /// <item>Calls <paramref name="caseOk"/> if this is a <see cref="Ok"/></item>
        /// <item>Calls <paramref name="caseErr"/> if this is a <see cref="Err"/></item>
        /// <item>Calls <paramref name="default"/> if the appropriate case* delegate wasnt provided.</item>
        /// </list>
        /// </summary>
        /// <param name="caseOk">Called if this is a <see cref="Ok"/></param>
        /// <param name="caseErr">Called if this is a <see cref="Err"/></param>
        /// <param name="default">Called if a delegate was not provided for this type</param>
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public void Switch(global::System.Action @default, global::System.Action<Ok>? caseOk = null, global::System.Action<Err>? caseErr = null)
        {
            switch (this.@Discriminator)
            {
                case 0:
                    throw new global::System.InvalidOperationException("Union has not been initialized");
                case 1:
                    if (!global::System.Object.ReferenceEquals(caseOk, null))
                        caseOk((Ok)this.@UnderlyingValue!);
                    else if (!global::System.Object.ReferenceEquals(@default, null))
                        @default();
                    else
                        throw new global::System.ArgumentNullException(nameof(@default));
                    break;
                case 2:
                    if (!global::System.Object.ReferenceEquals(caseErr, null))
                        caseErr((Err)this.@UnderlyingValue!);
                    else if (!global::System.Object.ReferenceEquals(@default, null))
                        @default();
                    else
                        throw new global::System.ArgumentNullException(nameof(@default));
                    break;
                default:
                    throw new global::System.InvalidOperationException($"Unsupported discriminator value {Discriminator}");
            }
        }
    
        /// <summary>
        /// Calls the appropriate delegate for the current type.
        /// <list type="bullet">
        /// <item>Calls <paramref name="caseOk"/> if this is a <see cref="Ok"/></item>
        /// <item>Calls <paramref name="caseErr"/> if this is a <see cref="Err"/></item>
        /// <item>Calls <paramref name="default"/> if the appropriate case* delegate wasnt provided.</item>
        /// </list>
        /// </summary>
        /// <param name="caseOk">Called if this is a <see cref="Ok"/></param>
        /// <param name="caseErr">Called if this is a <see cref="Err"/></param>
        /// <param name="default">Called if a delegate was not provided for this type</param>
        /// <returns>The value returned from the matched delegate</returns>
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TMatchResult Match<TMatchResult>(global::System.Func<TMatchResult> @default, global::System.Func<Ok, TMatchResult>? caseOk = null, global::System.Func<Err, TMatchResult>? caseErr = null)
        {
            switch (this.@Discriminator)
            {
                case 0:
                    throw new global::System.InvalidOperationException("Union has not been initialized");
                case 1:
                    if (!global::System.Object.ReferenceEquals(caseOk, null))
                        return caseOk((Ok)this.@UnderlyingValue!);
                    if (!global::System.Object.ReferenceEquals(@default, null))
                        return @default();
                    throw new global::System.ArgumentNullException(nameof(@default));
                case 2:
                    if (!global::System.Object.ReferenceEquals(caseErr, null))
                        return caseErr((Err)this.@UnderlyingValue!);
                    if (!global::System.Object.ReferenceEquals(@default, null))
                        return @default();
                    throw new global::System.ArgumentNullException(nameof(@default));
                default:
                    throw new global::System.InvalidOperationException($"Unsupported discriminator value {Discriminator}");
            }
        }
    
        /// <summary>
        /// Calls the appropriate delegate for the current type.
        /// <list type="bullet">
        /// <item>Calls <paramref name="caseOk"/> if this is a <see cref="Ok"/></item>
        /// <item>Calls <paramref name="caseErr"/> if this is a <see cref="Err"/></item>
        /// </list>
        /// </summary>
        /// <param name="caseOk">Called if this is a <see cref="Ok"/></param>
        /// <param name="caseErr">Called if this is a <see cref="Err"/></param>
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public void Switch(global::System.Action<Ok> caseOk, global::System.Action<Err> caseErr)
        {
            switch (this.@Discriminator)
            {
                case 0:
                    throw new global::System.InvalidOperationException("Union has not been initialized");
                case 1:
                    if (global::System.Object.ReferenceEquals(caseOk, null))
                        throw new global::System.ArgumentNullException(nameof(caseOk));
                    caseOk((Ok)this.@UnderlyingValue!);
                    break;
                case 2:
                    if (global::System.Object.ReferenceEquals(caseErr, null))
                        throw new global::System.ArgumentNullException(nameof(caseErr));
                    caseErr((Err)this.@UnderlyingValue!);
                    break;
                default:
                    throw new global::System.InvalidOperationException($"Unsupported discriminator value {Discriminator}");
            }
        }
    
        /// <summary>
        /// Calls the appropriate delegate for the current type.
        /// <list type="bullet">
        /// <item>Calls <paramref name="caseOk"/> if this is a <see cref="Ok"/></item>
        /// <item>Calls <paramref name="caseErr"/> if this is a <see cref="Err"/></item>
        /// </list>
        /// </summary>
        /// <param name="caseOk">Called if this is a <see cref="Ok"/></param>
        /// <param name="caseErr">Called if this is a <see cref="Err"/></param>
        /// <returns>The value returned from the matched delegate</returns>
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TMatchResult Match<TMatchResult>(global::System.Func<Ok, TMatchResult> caseOk, global::System.Func<Err, TMatchResult> caseErr)
        {
            switch (this.@Discriminator)
            {
                case 0:
                    throw new global::System.InvalidOperationException("Union has not been initialized");
                case 1:
                    if (global::System.Object.ReferenceEquals(caseOk, null))
                        throw new global::System.ArgumentNullException(nameof(caseOk));
                    return caseOk((Ok)this.@UnderlyingValue!);
                case 2:
                    if (global::System.Object.ReferenceEquals(caseErr, null))
                        throw new global::System.ArgumentNullException(nameof(caseErr));
                    return caseErr((Err)this.@UnderlyingValue!);
                default:
                    throw new global::System.InvalidOperationException($"Unsupported discriminator value {Discriminator}");
            }
        }
    
        
        /// <summary>
        /// If the current value is a <see cref="Ok"/> then <paramref name="asOk"/> will be set to it and <c>true</c> will be returned,
        /// otherwise <paramref name="Ok"/> will be set to <c>default(<see cref="Ok"/>)</c> and <c>false</c> will be returned
        /// </summary>
        /// <param name="asOk">The current value if this is a <see cref="Ok"/>, otherwise <c>default(<see cref="Ok"/>)</c></param>
        /// <returns><c>true</c> if the current value is a <see cref="Ok"/>, otherwise <c>false</c></returns>
        public bool IsOk([global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(true)]out Ok asOk)
        {
            if (this.@Discriminator != 1)
            {
                asOk = default(Ok);
                return false;
            }
            asOk = (Ok)this.@UnderlyingValue;
            return true;
        }
        
        /// <summary>
        /// If the current value is a <see cref="Err"/> then <paramref name="asErr"/> will be set to it and <c>true</c> will be returned,
        /// otherwise <paramref name="Err"/> will be set to <c>default(<see cref="Err"/>)</c> and <c>false</c> will be returned
        /// </summary>
        /// <param name="asErr">The current value if this is a <see cref="Err"/>, otherwise <c>default(<see cref="Err"/>)</c></param>
        /// <returns><c>true</c> if the current value is a <see cref="Err"/>, otherwise <c>false</c></returns>
        public bool IsErr([global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(true)]out Err asErr)
        {
            if (this.@Discriminator != 2)
            {
                asErr = default(Err);
                return false;
            }
            asErr = (Err)this.@UnderlyingValue;
            return true;
        }
        
        
        partial record Ok : Result<TOk,TErr>
        {
            /// <summary>The discriminator value of <see cref="Ok"/>.</summary>
            [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            [global::System.Diagnostics.DebuggerBrowsableAttribute(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
            public sealed override global::System.Byte @Discriminator => 1;
        }
        
        partial record Err : Result<TOk,TErr>
        {
            /// <summary>The discriminator value of <see cref="Err"/>.</summary>
            [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            [global::System.Diagnostics.DebuggerBrowsableAttribute(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
            public sealed override global::System.Byte @Discriminator => 2;
        }
    }
}