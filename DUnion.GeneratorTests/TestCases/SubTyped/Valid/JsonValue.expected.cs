/* Diagnostics: 0 */

/* Sources: 1 */
/* File Path: DUnion\DUnion.SourceGenerator\SubTyped.Valid.JsonValue.JsonValue.DUnion.g.cs */
// =============================================================
// This code was generated by the DUnion source generator.
// Changes to this file will be lost if the code is regenerated.
// =============================================================
#pragma warning disable
#nullable enable


namespace SubTyped.Valid.JsonValue
{
    abstract partial record JsonValue
    {
        /// <summary>A value used to discriminate what this instance represents.</summary>
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        [global::System.Diagnostics.DebuggerBrowsableAttribute(global::System.Diagnostics.DebuggerBrowsableState.Never)]
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        public abstract global::System.Byte @Discriminator { get; }
    
        public JsonValue @UnderlyingValue => this;
    
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private JsonValue()
        {
        }
    
        /// <summary>
        /// Calls the appropriate delegate for the current type.
        /// <list type="bullet">
        /// <item>Calls <paramref name="caseString"/> if this is a <see cref="String"/></item>
        /// <item>Calls <paramref name="caseNumber"/> if this is a <see cref="Number"/></item>
        /// <item>Calls <paramref name="caseBoolean"/> if this is a <see cref="Boolean"/></item>
        /// <item>Calls <paramref name="caseNull"/> if this is a <see cref="Null"/></item>
        /// <item>Calls <paramref name="caseArray"/> if this is a <see cref="Array"/></item>
        /// <item>Calls <paramref name="caseObject"/> if this is a <see cref="Object"/></item>
        /// <item>Calls <paramref name="default"/> if the appropriate case* delegate wasnt provided.</item>
        /// </list>
        /// </summary>
        /// <param name="caseString">Called if this is a <see cref="String"/></param>
        /// <param name="caseNumber">Called if this is a <see cref="Number"/></param>
        /// <param name="caseBoolean">Called if this is a <see cref="Boolean"/></param>
        /// <param name="caseNull">Called if this is a <see cref="Null"/></param>
        /// <param name="caseArray">Called if this is a <see cref="Array"/></param>
        /// <param name="caseObject">Called if this is a <see cref="Object"/></param>
        /// <param name="default">Called if a delegate was not provided for this type</param>
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public void Switch(global::System.Action @default, global::System.Action<String>? caseString = null, global::System.Action<Number>? caseNumber = null, global::System.Action<Boolean>? caseBoolean = null, global::System.Action<Null>? caseNull = null, global::System.Action<Array>? caseArray = null, global::System.Action<Object>? caseObject = null)
        {
            switch (this.@Discriminator)
            {
                case 0:
                    throw new global::System.InvalidOperationException("Union has not been initialized");
                case 1:
                    if (!global::System.Object.ReferenceEquals(caseString, null))
                        caseString((String)this.@UnderlyingValue!);
                    else if (!global::System.Object.ReferenceEquals(@default, null))
                        @default();
                    else
                        throw new global::System.ArgumentNullException(nameof(@default));
                    break;
                case 2:
                    if (!global::System.Object.ReferenceEquals(caseNumber, null))
                        caseNumber((Number)this.@UnderlyingValue!);
                    else if (!global::System.Object.ReferenceEquals(@default, null))
                        @default();
                    else
                        throw new global::System.ArgumentNullException(nameof(@default));
                    break;
                case 3:
                    if (!global::System.Object.ReferenceEquals(caseBoolean, null))
                        caseBoolean((Boolean)this.@UnderlyingValue!);
                    else if (!global::System.Object.ReferenceEquals(@default, null))
                        @default();
                    else
                        throw new global::System.ArgumentNullException(nameof(@default));
                    break;
                case 4:
                    if (!global::System.Object.ReferenceEquals(caseNull, null))
                        caseNull((Null)this.@UnderlyingValue!);
                    else if (!global::System.Object.ReferenceEquals(@default, null))
                        @default();
                    else
                        throw new global::System.ArgumentNullException(nameof(@default));
                    break;
                case 5:
                    if (!global::System.Object.ReferenceEquals(caseArray, null))
                        caseArray((Array)this.@UnderlyingValue!);
                    else if (!global::System.Object.ReferenceEquals(@default, null))
                        @default();
                    else
                        throw new global::System.ArgumentNullException(nameof(@default));
                    break;
                case 6:
                    if (!global::System.Object.ReferenceEquals(caseObject, null))
                        caseObject((Object)this.@UnderlyingValue!);
                    else if (!global::System.Object.ReferenceEquals(@default, null))
                        @default();
                    else
                        throw new global::System.ArgumentNullException(nameof(@default));
                    break;
                default:
                    throw new global::System.InvalidOperationException($"Unsupported discriminator value {Discriminator}");
            }
        }
    
        /// <summary>
        /// Calls the appropriate delegate for the current type.
        /// <list type="bullet">
        /// <item>Calls <paramref name="caseString"/> if this is a <see cref="String"/></item>
        /// <item>Calls <paramref name="caseNumber"/> if this is a <see cref="Number"/></item>
        /// <item>Calls <paramref name="caseBoolean"/> if this is a <see cref="Boolean"/></item>
        /// <item>Calls <paramref name="caseNull"/> if this is a <see cref="Null"/></item>
        /// <item>Calls <paramref name="caseArray"/> if this is a <see cref="Array"/></item>
        /// <item>Calls <paramref name="caseObject"/> if this is a <see cref="Object"/></item>
        /// <item>Calls <paramref name="default"/> if the appropriate case* delegate wasnt provided.</item>
        /// </list>
        /// </summary>
        /// <param name="caseString">Called if this is a <see cref="String"/></param>
        /// <param name="caseNumber">Called if this is a <see cref="Number"/></param>
        /// <param name="caseBoolean">Called if this is a <see cref="Boolean"/></param>
        /// <param name="caseNull">Called if this is a <see cref="Null"/></param>
        /// <param name="caseArray">Called if this is a <see cref="Array"/></param>
        /// <param name="caseObject">Called if this is a <see cref="Object"/></param>
        /// <param name="default">Called if a delegate was not provided for this type</param>
        /// <returns>The value returned from the matched delegate</returns>
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TMatchResult Match<TMatchResult>(global::System.Func<TMatchResult> @default, global::System.Func<String, TMatchResult>? caseString = null, global::System.Func<Number, TMatchResult>? caseNumber = null, global::System.Func<Boolean, TMatchResult>? caseBoolean = null, global::System.Func<Null, TMatchResult>? caseNull = null, global::System.Func<Array, TMatchResult>? caseArray = null, global::System.Func<Object, TMatchResult>? caseObject = null)
        {
            switch (this.@Discriminator)
            {
                case 0:
                    throw new global::System.InvalidOperationException("Union has not been initialized");
                case 1:
                    if (!global::System.Object.ReferenceEquals(caseString, null))
                        return caseString((String)this.@UnderlyingValue!);
                    if (!global::System.Object.ReferenceEquals(@default, null))
                        return @default();
                    throw new global::System.ArgumentNullException(nameof(@default));
                case 2:
                    if (!global::System.Object.ReferenceEquals(caseNumber, null))
                        return caseNumber((Number)this.@UnderlyingValue!);
                    if (!global::System.Object.ReferenceEquals(@default, null))
                        return @default();
                    throw new global::System.ArgumentNullException(nameof(@default));
                case 3:
                    if (!global::System.Object.ReferenceEquals(caseBoolean, null))
                        return caseBoolean((Boolean)this.@UnderlyingValue!);
                    if (!global::System.Object.ReferenceEquals(@default, null))
                        return @default();
                    throw new global::System.ArgumentNullException(nameof(@default));
                case 4:
                    if (!global::System.Object.ReferenceEquals(caseNull, null))
                        return caseNull((Null)this.@UnderlyingValue!);
                    if (!global::System.Object.ReferenceEquals(@default, null))
                        return @default();
                    throw new global::System.ArgumentNullException(nameof(@default));
                case 5:
                    if (!global::System.Object.ReferenceEquals(caseArray, null))
                        return caseArray((Array)this.@UnderlyingValue!);
                    if (!global::System.Object.ReferenceEquals(@default, null))
                        return @default();
                    throw new global::System.ArgumentNullException(nameof(@default));
                case 6:
                    if (!global::System.Object.ReferenceEquals(caseObject, null))
                        return caseObject((Object)this.@UnderlyingValue!);
                    if (!global::System.Object.ReferenceEquals(@default, null))
                        return @default();
                    throw new global::System.ArgumentNullException(nameof(@default));
                default:
                    throw new global::System.InvalidOperationException($"Unsupported discriminator value {Discriminator}");
            }
        }
    
        /// <summary>
        /// Calls the appropriate delegate for the current type.
        /// <list type="bullet">
        /// <item>Calls <paramref name="caseString"/> if this is a <see cref="String"/></item>
        /// <item>Calls <paramref name="caseNumber"/> if this is a <see cref="Number"/></item>
        /// <item>Calls <paramref name="caseBoolean"/> if this is a <see cref="Boolean"/></item>
        /// <item>Calls <paramref name="caseNull"/> if this is a <see cref="Null"/></item>
        /// <item>Calls <paramref name="caseArray"/> if this is a <see cref="Array"/></item>
        /// <item>Calls <paramref name="caseObject"/> if this is a <see cref="Object"/></item>
        /// </list>
        /// </summary>
        /// <param name="caseString">Called if this is a <see cref="String"/></param>
        /// <param name="caseNumber">Called if this is a <see cref="Number"/></param>
        /// <param name="caseBoolean">Called if this is a <see cref="Boolean"/></param>
        /// <param name="caseNull">Called if this is a <see cref="Null"/></param>
        /// <param name="caseArray">Called if this is a <see cref="Array"/></param>
        /// <param name="caseObject">Called if this is a <see cref="Object"/></param>
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public void Switch(global::System.Action<String> caseString, global::System.Action<Number> caseNumber, global::System.Action<Boolean> caseBoolean, global::System.Action<Null> caseNull, global::System.Action<Array> caseArray, global::System.Action<Object> caseObject)
        {
            switch (this.@Discriminator)
            {
                case 0:
                    throw new global::System.InvalidOperationException("Union has not been initialized");
                case 1:
                    if (global::System.Object.ReferenceEquals(caseString, null))
                        throw new global::System.ArgumentNullException(nameof(caseString));
                    caseString((String)this.@UnderlyingValue!);
                    break;
                case 2:
                    if (global::System.Object.ReferenceEquals(caseNumber, null))
                        throw new global::System.ArgumentNullException(nameof(caseNumber));
                    caseNumber((Number)this.@UnderlyingValue!);
                    break;
                case 3:
                    if (global::System.Object.ReferenceEquals(caseBoolean, null))
                        throw new global::System.ArgumentNullException(nameof(caseBoolean));
                    caseBoolean((Boolean)this.@UnderlyingValue!);
                    break;
                case 4:
                    if (global::System.Object.ReferenceEquals(caseNull, null))
                        throw new global::System.ArgumentNullException(nameof(caseNull));
                    caseNull((Null)this.@UnderlyingValue!);
                    break;
                case 5:
                    if (global::System.Object.ReferenceEquals(caseArray, null))
                        throw new global::System.ArgumentNullException(nameof(caseArray));
                    caseArray((Array)this.@UnderlyingValue!);
                    break;
                case 6:
                    if (global::System.Object.ReferenceEquals(caseObject, null))
                        throw new global::System.ArgumentNullException(nameof(caseObject));
                    caseObject((Object)this.@UnderlyingValue!);
                    break;
                default:
                    throw new global::System.InvalidOperationException($"Unsupported discriminator value {Discriminator}");
            }
        }
    
        /// <summary>
        /// Calls the appropriate delegate for the current type.
        /// <list type="bullet">
        /// <item>Calls <paramref name="caseString"/> if this is a <see cref="String"/></item>
        /// <item>Calls <paramref name="caseNumber"/> if this is a <see cref="Number"/></item>
        /// <item>Calls <paramref name="caseBoolean"/> if this is a <see cref="Boolean"/></item>
        /// <item>Calls <paramref name="caseNull"/> if this is a <see cref="Null"/></item>
        /// <item>Calls <paramref name="caseArray"/> if this is a <see cref="Array"/></item>
        /// <item>Calls <paramref name="caseObject"/> if this is a <see cref="Object"/></item>
        /// </list>
        /// </summary>
        /// <param name="caseString">Called if this is a <see cref="String"/></param>
        /// <param name="caseNumber">Called if this is a <see cref="Number"/></param>
        /// <param name="caseBoolean">Called if this is a <see cref="Boolean"/></param>
        /// <param name="caseNull">Called if this is a <see cref="Null"/></param>
        /// <param name="caseArray">Called if this is a <see cref="Array"/></param>
        /// <param name="caseObject">Called if this is a <see cref="Object"/></param>
        /// <returns>The value returned from the matched delegate</returns>
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public TMatchResult Match<TMatchResult>(global::System.Func<String, TMatchResult> caseString, global::System.Func<Number, TMatchResult> caseNumber, global::System.Func<Boolean, TMatchResult> caseBoolean, global::System.Func<Null, TMatchResult> caseNull, global::System.Func<Array, TMatchResult> caseArray, global::System.Func<Object, TMatchResult> caseObject)
        {
            switch (this.@Discriminator)
            {
                case 0:
                    throw new global::System.InvalidOperationException("Union has not been initialized");
                case 1:
                    if (global::System.Object.ReferenceEquals(caseString, null))
                        throw new global::System.ArgumentNullException(nameof(caseString));
                    return caseString((String)this.@UnderlyingValue!);
                case 2:
                    if (global::System.Object.ReferenceEquals(caseNumber, null))
                        throw new global::System.ArgumentNullException(nameof(caseNumber));
                    return caseNumber((Number)this.@UnderlyingValue!);
                case 3:
                    if (global::System.Object.ReferenceEquals(caseBoolean, null))
                        throw new global::System.ArgumentNullException(nameof(caseBoolean));
                    return caseBoolean((Boolean)this.@UnderlyingValue!);
                case 4:
                    if (global::System.Object.ReferenceEquals(caseNull, null))
                        throw new global::System.ArgumentNullException(nameof(caseNull));
                    return caseNull((Null)this.@UnderlyingValue!);
                case 5:
                    if (global::System.Object.ReferenceEquals(caseArray, null))
                        throw new global::System.ArgumentNullException(nameof(caseArray));
                    return caseArray((Array)this.@UnderlyingValue!);
                case 6:
                    if (global::System.Object.ReferenceEquals(caseObject, null))
                        throw new global::System.ArgumentNullException(nameof(caseObject));
                    return caseObject((Object)this.@UnderlyingValue!);
                default:
                    throw new global::System.InvalidOperationException($"Unsupported discriminator value {Discriminator}");
            }
        }
    
        
        /// <summary>
        /// If the current value is a <see cref="String"/> then <paramref name="asString"/> will be set to it and <c>true</c> will be returned,
        /// otherwise <paramref name="String"/> will be set to <c>default(<see cref="String"/>)</c> and <c>false</c> will be returned
        /// </summary>
        /// <param name="asString">The current value if this is a <see cref="String"/>, otherwise <c>default(<see cref="String"/>)</c></param>
        /// <returns><c>true</c> if the current value is a <see cref="String"/>, otherwise <c>false</c></returns>
        public bool IsString([global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(true)]out String asString)
        {
            if (this.@Discriminator != 1)
            {
                asString = default(String);
                return false;
            }
            asString = (String)this.@UnderlyingValue;
            return true;
        }
        
        /// <summary>
        /// If the current value is a <see cref="Number"/> then <paramref name="asNumber"/> will be set to it and <c>true</c> will be returned,
        /// otherwise <paramref name="Number"/> will be set to <c>default(<see cref="Number"/>)</c> and <c>false</c> will be returned
        /// </summary>
        /// <param name="asNumber">The current value if this is a <see cref="Number"/>, otherwise <c>default(<see cref="Number"/>)</c></param>
        /// <returns><c>true</c> if the current value is a <see cref="Number"/>, otherwise <c>false</c></returns>
        public bool IsNumber([global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(true)]out Number asNumber)
        {
            if (this.@Discriminator != 2)
            {
                asNumber = default(Number);
                return false;
            }
            asNumber = (Number)this.@UnderlyingValue;
            return true;
        }
        
        /// <summary>
        /// If the current value is a <see cref="Boolean"/> then <paramref name="asBoolean"/> will be set to it and <c>true</c> will be returned,
        /// otherwise <paramref name="Boolean"/> will be set to <c>default(<see cref="Boolean"/>)</c> and <c>false</c> will be returned
        /// </summary>
        /// <param name="asBoolean">The current value if this is a <see cref="Boolean"/>, otherwise <c>default(<see cref="Boolean"/>)</c></param>
        /// <returns><c>true</c> if the current value is a <see cref="Boolean"/>, otherwise <c>false</c></returns>
        public bool IsBoolean([global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(true)]out Boolean asBoolean)
        {
            if (this.@Discriminator != 3)
            {
                asBoolean = default(Boolean);
                return false;
            }
            asBoolean = (Boolean)this.@UnderlyingValue;
            return true;
        }
        
        /// <summary>
        /// If the current value is a <see cref="Null"/> then <paramref name="asNull"/> will be set to it and <c>true</c> will be returned,
        /// otherwise <paramref name="Null"/> will be set to <c>default(<see cref="Null"/>)</c> and <c>false</c> will be returned
        /// </summary>
        /// <param name="asNull">The current value if this is a <see cref="Null"/>, otherwise <c>default(<see cref="Null"/>)</c></param>
        /// <returns><c>true</c> if the current value is a <see cref="Null"/>, otherwise <c>false</c></returns>
        public bool IsNull([global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(true)]out Null asNull)
        {
            if (this.@Discriminator != 4)
            {
                asNull = default(Null);
                return false;
            }
            asNull = (Null)this.@UnderlyingValue;
            return true;
        }
        
        /// <summary>
        /// If the current value is a <see cref="Array"/> then <paramref name="asArray"/> will be set to it and <c>true</c> will be returned,
        /// otherwise <paramref name="Array"/> will be set to <c>default(<see cref="Array"/>)</c> and <c>false</c> will be returned
        /// </summary>
        /// <param name="asArray">The current value if this is a <see cref="Array"/>, otherwise <c>default(<see cref="Array"/>)</c></param>
        /// <returns><c>true</c> if the current value is a <see cref="Array"/>, otherwise <c>false</c></returns>
        public bool IsArray([global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(true)]out Array asArray)
        {
            if (this.@Discriminator != 5)
            {
                asArray = default(Array);
                return false;
            }
            asArray = (Array)this.@UnderlyingValue;
            return true;
        }
        
        /// <summary>
        /// If the current value is a <see cref="Object"/> then <paramref name="asObject"/> will be set to it and <c>true</c> will be returned,
        /// otherwise <paramref name="Object"/> will be set to <c>default(<see cref="Object"/>)</c> and <c>false</c> will be returned
        /// </summary>
        /// <param name="asObject">The current value if this is a <see cref="Object"/>, otherwise <c>default(<see cref="Object"/>)</c></param>
        /// <returns><c>true</c> if the current value is a <see cref="Object"/>, otherwise <c>false</c></returns>
        public bool IsObject([global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(true)]out Object asObject)
        {
            if (this.@Discriminator != 6)
            {
                asObject = default(Object);
                return false;
            }
            asObject = (Object)this.@UnderlyingValue;
            return true;
        }
        
        
        partial record String : JsonValue
        {
            /// <summary>The discriminator value of <see cref="String"/>.</summary>
            [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            [global::System.Diagnostics.DebuggerBrowsableAttribute(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
            public sealed override global::System.Byte @Discriminator => 1;
        }
        
        partial record Number : JsonValue
        {
            /// <summary>The discriminator value of <see cref="Number"/>.</summary>
            [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            [global::System.Diagnostics.DebuggerBrowsableAttribute(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
            public sealed override global::System.Byte @Discriminator => 2;
        }
        
        partial record Boolean : JsonValue
        {
            /// <summary>The discriminator value of <see cref="Boolean"/>.</summary>
            [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            [global::System.Diagnostics.DebuggerBrowsableAttribute(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
            public sealed override global::System.Byte @Discriminator => 3;
        }
        
        partial record Null : JsonValue
        {
            /// <summary>The discriminator value of <see cref="Null"/>.</summary>
            [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            [global::System.Diagnostics.DebuggerBrowsableAttribute(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
            public sealed override global::System.Byte @Discriminator => 4;
        }
        
        partial record Array : JsonValue
        {
            /// <summary>The discriminator value of <see cref="Array"/>.</summary>
            [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            [global::System.Diagnostics.DebuggerBrowsableAttribute(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
            public sealed override global::System.Byte @Discriminator => 5;
        }
        
        partial record Object : JsonValue
        {
            /// <summary>The discriminator value of <see cref="Object"/>.</summary>
            [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            [global::System.Diagnostics.DebuggerBrowsableAttribute(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
            public sealed override global::System.Byte @Discriminator => 6;
        }
    }
}